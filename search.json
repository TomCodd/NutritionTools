[{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"introduction","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Introduction","title":"Fuzzy-Matcher-Guide","text":"Fuzzy Matchers GUI interface, standard R function documentation ill-suited helping use. Instead guide created guide using function.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"data-prep","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Data Prep","title":"Fuzzy-Matcher-Guide","text":"first step using Fuzzy Matcher prepare datasets like match. Fuzzy Matcher requires two different data frames input, optional key word. example, create two data frames match items .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"r-setup","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep","what":"R setup","title":"Fuzzy-Matcher-Guide","text":"First load required packages. NutritionTools package, contains Fuzzy Matcher, need. dplyr package widely used contains many useful tools. also dependency NutritionTools, already installed system. data prep methods can done dplyr instead base R, methods shown - requiring called now. , create two example data frames - breakfast_df extensive_food_db. data frames matching .","code":"library(NutritionTools) library(dplyr) breakfast_df <-   data.frame(     \"ID\" = c(       \"test_01\",       \"test_02\",       \"test_03\",       \"test_04\",       \"test_05\",       \"test_06\",       \"test_07\"     ),     \"food_name\" = c(       \"Wholemeal Bread\",       \"Ground Pepper\",       \"whole milk\",       \"Orange Juice\",       \"Butter, salted\",       \"Salt\",       \"Eggs\"     ),     \"CART B (mcg)\" = c(NA, 105, \"\", 130, NA, \"\", 111),     \"CART A (mcg)\" = c(0, 35, 23, 27, 6, 34, NA),     \"CRYPXB (mcg)\" = c(110, 67, 72, NA, 160, 102, 98),     \"CART B eq (std) (mcg)\" = c(\"\", 107, 102, NA, \"\", NA, 72),     \"CART B eq (mcg)\" = c(159, 103, 132, NA, \"\", \"\", \"\"),     \"Vit A RAE (mcg)\" = c(13, 8, NA, 15, 13, NA, NA),     \"Vit A (mcg)\" = c(12, 11, 8, 13, 3, 1, 10),     \"Retinol (mcg)\" = c(0, 7, 12, NA, 5, 2, 10),     \"comments\" = c(       \"Imaginary values\",       \"Completely fictional values\",       \"Fictional values #2\",       \"More fictional values\",       \"Fictional #4\",       \"Fictional no. 5\",       \"fictional 6\"     ), check.names = F   )  extensive_food_db <- data.frame(     \"item_ID\" = c(       \"01_01\",       \"01_02\",       \"01_03\",       \"01_04\",       \"01_05\",       \"01_06\",       \"01_07\",       \"01_08\",       \"01_09\",       \"01_10\",       \"01_11\",       \"01_12\",       \"01_13\",       \"01_14\",       \"01_15\",       \"01_16\",       \"01_17\",       \"01_18\",       \"01_19\",       \"01_20\"     ),     \"food_item_name\" = c(       \"Bread (wholemeal)\",       \"Pepper, ground, black\",       \"Milk, cow, whole, fresh, raw\",       \"Orange Juice\",       \"Butter, with salt\",       \"Salt\",       \"Egg, chicken, whole, raw\",       \"Bacon\",       \"Sausage\",       \"Milk, skimmed\",       \"Butter, unsalted\",       \"Bread (white)\",       \"Bread (Brown), wheat flour\",       \"Tomato\",       \"Mushroom\",       \"Parsley\",       \"Tomato, tinned\",       \"Apple Juice\",       \"Pineapple Juice\",       \"Mango Juice\"       ),     \"Iron (Fe)\" = c(12, 11, 8, 13, 3, 1, 10, 15, 3, 80, 14, 27, 54, 12, 7, 3, 7, 15, 10, 45),     \"Selenium (Se)\" = c(0, 35, 23, 27, 6, 34, NA, 23, 10, 8, 6, 15, NA, \"\", 20, 12, 18, 20, 12, 20),     \"Zinc (Zn)\" = c(13, 8, NA, 15, 13, NA, NA, 10, 8, 9, 4, 3, 2, 10, 8, 6, 14, 13, 21, 6),     \"comments\" = c(       \"These are imaginary\",       \"Really fictional values\",       \"Fictional values again\",       \"More fictions\",       \"imaginary #4\",       \"imaginary no. 5\",       \"imaginary 6\",       \"More fiction\",       \"complete fiction\",       \"again, fantasy\",       \"Fantasy again\",       \"once again, imaginary\",       \"complete fiction\",       \"and again, imaginary\",       \"this ones real (only joking)\",       \"knock knock\",       \"who's there?\",       \"cow says\",       \"cow says who?\",       \"no, cow says moo!\"     ), check.names = F   )"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"data-preparation","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep","what":"Data preparation","title":"Fuzzy-Matcher-Guide","text":"Fuzzy Matcher, mentioned description, certain data frame input requirements - namely data frames 2 columns size, first column ID column, second food item name. order create ideal data frame, subset 2 original input columns.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"subsetting-with-base-r","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep > Data preparation","what":"Subsetting with base R","title":"Fuzzy-Matcher-Guide","text":"first method use base R functions. Using square brackets, can tell R want two columns, selected columns 1 2, order - column 1 ID column want, column 2 item name want. order selection important - data frame set differently, ID column , example, column 4, item names column 1, command instead [,c(4,1)] - first column list 4 ID , item name column (1).","code":"breakfast_df_2col <- breakfast_df[,c(1,2)] extensive_food_db_2col <- extensive_food_db[,c(1,2)]"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"subsetting-with-dplyr","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep > Data preparation","what":"Subsetting with dplyr","title":"Fuzzy-Matcher-Guide","text":"methods make use select function dplyr package. Using dplyr select tool, instead picking columns want column numbers, instead selecting column names - selecting ID column name first, food name column. methods identical outputs.","code":"breakfast_df_2col <- breakfast_df %>% select(\"ID\", \"food_name\") extensive_food_db_2col <- extensive_food_db %>% select(\"item_ID\", \"food_item_name\")"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"calling-the-fuzzy-matcher","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Calling the Fuzzy Matcher","title":"Fuzzy-Matcher-Guide","text":"order call Fuzzy Matcher simply use following command: Deciding data frame df1 df2 important certain applications. general rule larger dataset df2 - list items df1 search matches. Please note: matching larger datasets step can take seconds process moving .","code":"Fuzzy_Matcher(df1 = breakfast_df_2col, df2 = extensive_food_db_2col)"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"optional-command-focus_term","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Calling the Fuzzy Matcher","what":"Optional command: focus_term","title":"Fuzzy-Matcher-Guide","text":"called Fuzzy Matcher look similarity food item names , potential matches close enough, rank top 5 pick . additional input command can use, focus_term. word can specify. specified, word appears potential match, selection requirements showing match reduced. means option pick wider range items food item name contains focus_term. useful , example, need prioritise matching food items contain ‘raw’ term - potential matches shown. extra matches technically ones fuzzy matcher doesn’t think good match, still might give options decide . use focus term example, command :","code":"Fuzzy_Matcher(df1 = breakfast_df_2col, df2 = extensive_food_db_2col, focus_term = \"raw\")"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"matching-using-the-fuzzy-matcher","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Matching using the Fuzzy Matcher","title":"Fuzzy-Matcher-Guide","text":"potential matches found, Fuzzy Matcher open pop-window, interactive table .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"selecting-matches","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Matching using the Fuzzy Matcher","what":"Selecting Matches","title":"Fuzzy-Matcher-Guide","text":"table contains 7 columns - ID item name column df1, ID item name column df2, ‘Correct Match’ tickbox column select correct potential match , ‘Confidence’ column select match confidence .  item df1 can 5 potential matches df2 - can see image, Orange Juice 3 potential matches; Orange Juice, Apple Juice, Mango Juice. case believe Orange Juice matched Orange Juice, select tickbox row contains match. soon potential matches Orange Juice get dropped bottom table, longer selectable - prevent accidental multimatching single item.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"match-confidences","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Matching using the Fuzzy Matcher","what":"Match confidences","title":"Fuzzy-Matcher-Guide","text":"match, confidence value must selected. 3 potential confidence values pick - High, Medium, Low.  example, matching ‘milk, whole, (cows), raw’ ‘whole, raw cows milk’ might marked high confidence - sure factors match correct. Matching ‘whole cows milk’ ‘whole, raw cows milk’ might medium confidence match, depending important think raw . Matching ‘milk’ ‘whole, raw cows milk’ might low confidence - assuming cows milk, ’re assuming whole milk, ’re assuming pasturised. individual’s organisations definition constitutes high, medium low match subjective potentially use-dependent, values give good range potential inputs pick . believe Orange Juice match high confidence match, option pick.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"finishing-the-matching","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Finishing the Matching","title":"Fuzzy-Matcher-Guide","text":"correct matches completed, table look something like :  done select “matches identified” button top-left page. open another pop-window, giving options saving matches.  first option checkbox, asking whether want strip match data back bare bones required relink data - selected output contain item ID df1, item ID df2, match confidence, table. isn’t selected output contain food item names well. option save R object, save matches csv. R object selected data frame output variable name specified save options appear continue work . csv option selected, csv created R projects root location, tidied version save file name selected. options want selected, finished using Fuzzy Matcher - new pop-window appear stats session (number matches long took), click close option, Fuzzy Matcher close.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"after-the-fuzzy-matcher","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"After the Fuzzy Matcher","title":"Fuzzy-Matcher-Guide","text":"matches outputted, easy re-link output original files. merge tool links items multiple datasets provided matching ID’s matching ID column names. stripped version Fuzzy matcher output automatically restores ID column names originals respective data frame (ID item_ID), merging can done easily. code chunk comprises two merges - first one merging fuzzy matcher outputs breakfast_df data frame, output merge merged extensive_food_db data frame. example Fuzzy Matcher Output called ‘fuzzy_match_outputs’.","code":"fm_outputs_merged <- merge(fuzzy_match_outputs, breakfast_df, \"ID\")  fm_outputs_merged <- merge(fm_outputs_merged, extensive_food_db, \"item_ID\")"},{"path":"https://tomcodd.github.io/NutritionTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Codd. Author, maintainer.            https://github.com/TomCodd Lucia Segovia de la Revilla. Author, contributor.            https://github.com/LuciaSegovia","code":""},{"path":"https://tomcodd.github.io/NutritionTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Codd T, Segovia de la Revilla L (2023). NutritionTools: Tools Organisation, Matching, Calculation, Summarisation Nutrition Data. R package version 1.0.1, https://tomcodd.github.io/NutritionTools/, https://github.com/TomCodd/NutritionTools.","code":"@Manual{,   title = {NutritionTools: Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data},   author = {Thomas Codd and Lucia {Segovia de la Revilla}},   year = {2023},   note = {R package version 1.0.1, https://tomcodd.github.io/NutritionTools/},   url = {https://github.com/TomCodd/NutritionTools}, }"},{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"NutritionTools R package functions help wide range calculations processes commonly occur working nutrition datasets. goal behind development automatically work, rather help nutritionists data scientists complete tasks quickly remaining full control decisions made, clear notation decisions made every step. Currently NutritionTools offers 6 tools help 4 key areas; Nutritional Calculations, Food Matching, Food Dataset Management, Output Summaries, although functions still development set added later time. NutritionTools developed work Micronutrient Action Policy Support (MAPS) Project, although use tools widely encouraged might find useful use exclusive MAPS project.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"can install latest version package github running following lines code:","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"TomCodd/NutritionTools\")"},{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"Open issue (GitHub issues bug reports, feature requests, function requests) NutritionTools R files (Github folder R files functions - like copy modify functions use, please , please retain original citation)","code":""},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"quick examples various function interfaces outputs. First main interface Fuzzy_Matcher Tool, highlighting potential matches across different nutritional datasets. Next output Group Summariser. less specific nutrition possible give example functionality using R’s built-datasets, summarise car data, grouped number cylinders.","code":"Fuzzy_Output <- Fuzzy_Matcher(TZ_FM, DJ_FM) mtcars_grouped_averages <- Group_Summariser(df = mtcars, group_ID_col = 'cyl', sep_row = T, round_weighting = T) print(mtcars_grouped_averages)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"function includes various ways calculating   standardised beta-carotene equivalents (CARTBEQ) value.   appropriate calculation selected based availability input   data.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"","code":"CARTBEQ_standardised(   df,   item_ID = \"fdc_id\",   CARTAmcg = \"CARTAmcg\",   CARTBmcg = \"CARTBmcg\",   CARTBEQmcg = \"CARTBEQmcg\",   CARTBEQmcg_std = \"CARTBEQmcg_std\",   CRYPXBmcg = \"CRYPXBmcg\",   VITAmcg = \"VITAmcg\",   VITA_RAEmcg = \"VITA_RAEmcg\",   RETOLmcg = \"RETOLmcg\",   comment_col = \"comments\",   compile = T,   carotene = T,   comment = T )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"df Required - data.frame data currently stored item_ID Required - default: 'fdc_id' - column contains data ID column name CARTAmcg Optional - default: 'CARTAmcg' - potential input variable; column contains data alpha-carotene micrograms CARTBmcg Optional - default: 'CARTBmcg' - potential input variable; column contains data beta-carotene micrograms CARTBEQmcg Optional - default: 'CARTBEQmcg' - potential input variable; column contains data beta-carotene equivalent micrograms CARTBEQmcg_std Optional - default: 'CARTBEQmcg_std' - potential input variable; column contains data standardised beta-carotene equivalent micrograms CRYPXBmcg OPtional - default: 'CRYPXBmcg' - potential input variable; column contains data beta-crpytoxanthin micrograms VITAmcg Optional - default: 'VITAmcg' - potential input variable; column contains data Vitamin-micrograms VITA_RAEmcg Optional - default: 'VITA_RAEmcg' - potential input variable; column contains data Vitamin-Retinol Activity Equivalents, micrograms RETOLmcg Optional - default: 'RETOLmcg' - potential input variable; column contains data Retinol micrograms comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question compile Optional - default: T - TRUE FALSE. compile set T (default), Beta-Carotene (CARTBmcg) available Beta-Carotene Eq. (CARTBEQ) used value Beta-Carotene equivalent (standardised). carotene Optional - default: T - TRUE FALSE. carotene set T (default), Beta-Carotene (CARTBmcg) available used value Beta-Carotene equivalent (standardised) comment Optional - default: T - TRUE FALSE. compile set T (default), function run description calculation used find CARTBEQ_standardised added comment_col. comment_col selected, comment = T, one created, called comments.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"data.frame mirrors df, new column -  recalculated_CARTBEQmcg_std - added. New comments may also added.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"Standardiser can use 6 different ways calculating   Beta-Carotene, case--case (row--row) basis ensure   item appropriate calculation used .   appropriate calculation completed (due incomplete input data)   next appropriate calculation used, .   calculations position hierarchy shown : 1. recalculated_CARTBEQmcg_std = CARTBmcg_value + 0.5*CARTAmcg_value       + 0.5*CRYPXBmcg_value. Beta-Carotene Equivalents (standardised) value       (CARTBEQ_std) calculated base elements, dependent valid       Alpha-Carotene (CARTA), Beta-Carotene (CARTB), Beta-Cryptoxanthin       CRYPXB) values. 2. recalculated_CARTBEQmcg_std = CARTBEQmcg_std_value.       base elements calculation unavailable, standardised       CARTBEQ value already exists, used. 3. recalculated_CARTBEQmcg_std = CARTBEQmcg _value. neither       base elements calculation standardised CARTBEQ value       unavailable non-standardised CARTBEQ value used       instead, exists. 4. recalculated_CARTBEQmcg_std = CARTBmcg _value. neither       base elements calculation, CARTBEQ value (standardised       otherwise) exist, Beta-Carotene (CARTB) value used       available. 5. recalculated_CARTBEQmcg_std = (VITA_RAEmcg_value -       RETOLmcg_value)*12. none available,       CATBEQ_std calculated Vitamin Retinol Activity Equivalent       (VITA_RAE) Retinol (RETOL). 6. recalculated_CARTBEQmcg_std = (VITAmcg_value -       RETOLmcg_value)*6. none available, CATBEQ_std       calculated Vitamin (VITA) Retinol (RETOL). hierarchy remains unchanged – however, equations hierarchy   can altered depending compile carotene input options.   set True, full list 6 equations made available.   compile == F, options 2 3 (use pre-existing CARTBEQ_std   CARTBEQ values) removed, meaning options 1, 4, 5, 6   available Hierarchy. Similarly, carotene == F, option 4 (  use pre-existing CARTB value) removed, leaving options 1, 5, 6   set false.   none options available (.e. data incomplete,   value can calculated fill-value used) CARTBEQ_std   value set NA.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"","code":"#The most common usage scenario will be covered. First we will create a test #data.frame with dummy data to use the function on. This function is designed #to be able to be used with patchy data - if certain columns are incomplete #then then the best calculation will be used on a row-by-row basis.  test_df <- data.frame( ID = c(\"test_01\", \"test_02\", \"test_03\", \"test_04\", \"test_05\", \"test_06\", \"test_07\", \"test_08\", \"test_09\", \"test_10\" ), food_name = c(\"Bread (wholemeal)\", \"Pepper, ground, black\", \"Milk, cow, whole, fresh, raw\", \"Orange Juice\", \"Butter (cow milk), salted\", \"Salt, Iodized\", \"Egg, chicken, whole, raw\", \"Tomato, red, ripe, raw\", \"Mushroom, fresh, raw\", \"Parsley, fresh, raw\"), \"CART B (mcg)\" = c(NA, 105, \"\", 130, NA, \"\", 111, NA, 112, 101), \"CART A (mcg)\" = c(0, 35, 23, 27, 6, 34, NA, 18, \"\", 40), \"CRYPXB (mcg)\" = c(110, 67, 72, NA, 160, 102, 98, 37, 28, 60), \"CART B eq (std) (mcg)\" = c(\"\", 107, 102, NA, \"\", NA, 72, \"\", \"\", 143), \"CART B eq (mcg)\" = c(159, 103, 132, NA, \"\", \"\", \"\", 78, NA, 92), \"Vit A RAE (mcg)\" = c(13, 8, NA, 15, 13, NA, NA, NA, 7, 10), \"Vit A (mcg)\" = c(12, 11, 8, 13, 3, 1, 10, 15, 3, 6), \"Retinol (mcg)\" = c(0, 7, 12, NA, 5, 2, 10, 6, \"\", 1), \"comments\" = c( \"Imaginary values\", \"Completely fictional values\", \"Fictional values #2\", \"More fictional values\", \"Fictional #4\", \"Fictional no. 5\", \"fictional 6\", \"more fiction\", \"again, fiction\", \"Fictional number 9\" ), check.names = FALSE)  #In this case the data.frame we want to run through is called test_df. #However the standard INFOODS names haven't been used, so the assumed nutrient #column names won't work, and they will have to be manually assigned. However, #the comment column is named the default name (comments) and so even if left #out will still be valid.  output_df <- CARTBEQ_standardised(df = test_df, item_ID = 'ID', CARTAmcg = 'CART A (mcg)', CARTBmcg = 'CART B (mcg)', CARTBEQmcg = 'CART B eq (mcg)', CARTBEQmcg_std = 'CART B eq (std) (mcg)',  CRYPXBmcg = 'CRYPXB (mcg)', VITAmcg = 'Vit A (mcg)',  VITA_RAEmcg = 'Vit A RAE (mcg)',  RETOLmcg = 'Retinol (mcg)') #> Item test_01 CARTBEQ_standardised calculated to be 159mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg value. #> Item test_02 CARTBEQ_standardised calculated to be 107mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_03 CARTBEQ_standardised calculated to be 102mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_04 CARTBEQ_standardised calculated to be 130mcg. CARTBEQ_standardised compiled from previous CARTBmcg value. #> Item test_05 CARTBEQ_standardised calculated to be 96mcg. CARTBEQ_standardised calculated from VITA_RAE and RETOL. #> Item test_06 CARTBEQ_standardised calculated to be 0mcg. CARTBEQ_standardised calculated from VITA and RETOL - recalculated_CARTBEQmcg_std calculated to be less than 0. Value reset to 0. #> Item test_07 CARTBEQ_standardised calculated to be 72mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_08 CARTBEQ_standardised calculated to be 78mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg value. #> Item test_09 CARTBEQ_standardised calculated to be 112mcg. CARTBEQ_standardised compiled from previous CARTBmcg value. #> Item test_10 CARTBEQ_standardised calculated to be 143mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value.  #The resulting output will have a modified comments column, and a new column - #recalculated_CARTBEQmcg_std"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":null,"dir":"Reference","previous_headings":"","what":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"function reads dataframe, well names 2-4   columns comprise decimal system within dataframe.   checks integrity series decimal identities row   rest decimal identities within row, picking   inconsistencies. inconsistencies reported, eith console messages   error report dataframe.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"","code":"Decimal_System_Checker(df, first, second, third, fourth)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"df Required - data frame containing decimal system. first Required - first column decimal system - basic item ID; e.g. 01 . second Required - second column decimal system - first subdivision base ID; e.g. 01.005 . third Optional - third column decimal system - second subdivision base ID first second ID; e.g. 01.005.03 . fourth Optional - fourth column decimal system - third subdivision base ID, second subdivision second ID, first subdivision third ID; e.g. 01.005.03.01 .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"R dataframe detailing errors found item   decimal system.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"","code":"#Two examples will be covered - one that results in the output error table, #another that produces the output messages only (not recommended for large #dataframes).  #First, we must create a test dataframe: test_df <- data.frame( c(\"Merlot\", \"pinot grigio\", \"Chateauneuf-du-Pape\", \"Tokaji\", \"Champagne\", \"Sauvignon Blanc\", \"Chardonnay\", \"Malbec\"), c(\"01\", \"01\", \"01\", \"01\", \"02\", \"02\", \"02\", \"02\"), c(\"02.01\", \"01.01\", \"01.02\", \"01.02\", \"02.01\", \"02.01\", \"02.02\", \"02.02\"), c(\"02.01.0111\", \"01.01.0131\", \"01.02.0001\", \"01.02.2031\", \"02.01.1001\", \"02.01.1001\", \"02.02.3443\", \"02.03.4341\"), c(\"02.01.0111.01\", \"01.01.0131.04\", \"01.02.0001.01\", \"01.02.2031.03\", \"02.01.1001.06\", \"02.01.1001.06\", \"02.01.3443.02\", \"02.02.4341.03\") )    #Then we should rename the columns of the dataframe:    colnames(test_df) <-     c(\"Wine names\",       \"ID1\",       \"ID2\",       \"ID3\",       \"ID4\"     )   #This first line runs the dataframe, and has an output variable listed. This  #means that as well as putting a message in the console when an error is  #found, all the error reports will be saved to a dataframe too.   output_test <- Decimal_System_Checker(test_df, first = \"ID1\", second =  \"ID2\", third = \"ID3\", fourth = \"ID4\") #> Tertiary decimal level used #>  #> Quaternary decimal level used #>  #> duplicate codes found in fourth level: 02.01.1001.06 #> [1] \"02.01.0111.01\" #> The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> [1] \"02.01.3443.02\" #> The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> [1] \"02.02.4341.03\" #> The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02.   #However, if we only want to get the readouts and not have an error  #dataframe to refer back to, then the code can be run like so:   Decimal_System_Checker(test_df, first = \"ID1\", second = \"ID2\", third =  \"ID3\", fourth = \"ID4\") #> Tertiary decimal level used #>  #> Quaternary decimal level used #>  #> duplicate codes found in fourth level: 02.01.1001.06 #> [1] \"02.01.0111.01\" #> The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> [1] \"02.01.3443.02\" #> The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> [1] \"02.02.4341.03\" #> The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02. #>   primary code secondary code tertiary code quaternary code #> 1           01          02.01    02.01.0111   02.01.0111.01 #> 5           02          02.01    02.01.1001   02.01.1001.06 #> 6           02          02.01    02.01.1001   02.01.1001.06 #> 7           02          02.02    02.02.3443   02.01.3443.02 #> 8           02          02.02    02.03.4341   02.02.4341.03 #>                                                                                                                                                                                                                                                                                                        error #> 1 The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. - The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. - The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> 5                                                                                                                                                                                                                                                       duplicate codes found in fourth level: 02.01.1001.06 #> 6                                                                                                                                                                                                                                                       duplicate codes found in fourth level: 02.01.1001.06 #> 7                                                                                                                                                                                               The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> 8                                                                                                                                                                                                    The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02.   #This will do the same thing as the previous run, producing error printouts,  #but it will not create an error report dataframe."},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"function works basic calculator - values Total   Protein grams 'PROTg', Total Fat grams (ideally standardised)   'FATg_standardised', Available Carbohydrate grams   'CHOAVLDFg', Fibre, Total Dietary grams 'FIBTGg'   Alcohol grams 'ALCg' combined fins Energy kcal.   Alcohol optional, whereas inputs required - Alcohol   missing assumed 0.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"","code":"ENERCKcal_standardised(PROTg, FATg_standardised, CHOAVLDFg, FIBTGg, ALCg)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"PROTg Required - Total Protein value (grams) food item examined. FATg_standardised Required - Total Fat value (grams) food item examined. CHOAVLDFg Required - Total Available Carbohydrate value (grams) food item examined. FIBTGg Required - Total Dietary Fibre value (grams) food item examined. ALCg Optional - Total Alcohol value (grams) food item examined.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"calculated Energy value kcal.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"","code":"#Three examples will be covered - two variants for a one-off #calculation, and to create a column with the calculated results.  #Single calculation:  #Bread, wheat, white, unfortified  Protein_value <- 7.5 Fat_value <- 1.3 Carb_value <- 50.5 Fibre_value <- 2.9 Alcohol_value <- 0  standardised_kcal <- ENERCKcal_standardised(PROT = Protein_value, FAT = Fat_value, CHOAVLDF = Carb_value, FIBTG = Fibre_value, ALC = Alcohol_value)  #alternatively:  standardised_kcal <- ENERCKcal_standardised(PROT = 7.5, FAT = 1.3, CHOAVLDF = 50.5, FIBTG = 2.9, ALC = 0)  #data.frame calculation:  #First, an example dataframe is outlined and created -  test_df_WAFCT2019 <- data.frame( c(\"Bread, wheat, white, unfortified\", \"Beer, European (4.6% v/v alcohol)\", \"Maize, yellow, meal, whole grains, unfortified\", \"Sweet potato, yellow flesh, raw\", \"Cassava, tuber, white flesh, raw\"), c(7.5, 0.3, 9.4, 1.5, 1.3), c(1.3, 0, 3.7, 0.2, 0.3), c(50.5, 3.7, 65.2, 25.5, 31.6), c(2.9, 0, 9.4, 3, 3.7), c(0, 3.6, 0, NA, 0))  #Then, the columns are renamed:  colnames(test_df_WAFCT2019) <- c(\"food_name\", \"protein\", \"fat\", \"carbs\", \"fb\", \"alcohol\")  #Once renamed, the function is applied. the assigned output is a new column #in the data.frame, and the inputs are the different columns detailing the #relevant food nutrient values.  test_df_WAFCT2019$ENERCKcal_stnd <- ENERCKcal_standardised(          test_df_WAFCT2019$protein,          test_df_WAFCT2019$fat,          test_df_WAFCT2019$carbs,          test_df_WAFCT2019$fb,          test_df_WAFCT2019$alcohol)  print(test_df_WAFCT2019) #>                                        food_name protein fat carbs  fb alcohol #> 1               Bread, wheat, white, unfortified     7.5 1.3  50.5 2.9     0.0 #> 2              Beer, European (4.6% v/v alcohol)     0.3 0.0   3.7 0.0     3.6 #> 3 Maize, yellow, meal, whole grains, unfortified     9.4 3.7  65.2 9.4     0.0 #> 4                Sweet potato, yellow flesh, raw     1.5 0.2  25.5 3.0      NA #> 5               Cassava, tuber, white flesh, raw     1.3 0.3  31.6 3.7     0.0 #>   ENERCKcal_stnd #> 1          249.5 #> 2           41.2 #> 3          350.5 #> 4          115.8 #> 5          141.7"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"function works basic calculator - values Total   Protein grams 'PROTg', Total Fat grams (ideally standardised)   'FATg_standardised', Available Carbohydrate grams   'CHOAVLDFg', Fibre, Total Dietary grams 'FIBTGg'   Alcohol grams 'ALCg' combined fins Energy kj.   Alcohol optional, whereas inputs required - Alcohol   missing assumed 0.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"","code":"ENERCKj_standardised(PROTg, FATg_standardised, CHOAVLDFg, FIBTGg, ALCg)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"PROTg Required - Total Protein value (grams) food item examined. FATg_standardised Required - Total Fat value (grams) food item examined. CHOAVLDFg Required - Total Available Carbohydrate value (grams) food item examined. FIBTGg Required - Total Dietary Fibre value (grams) food item examined. ALCg Optional - Total Alcohol value (grams) food item examined.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"calculated Energy value kJ.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"","code":"#Three examples will be covered - two variants for a one-off #calculation, and to create a column with the calculated results.  #Single calculation:  #Bread, wheat, white, unfortified  Protein_value <- 7.5 Fat_value <- 1.3 Carb_value <- 50.5 Fibre_value <- 2.9 Alcohol_value <- 0  standardised_kJ <- ENERCKj_standardised(PROT = Protein_value, FAT = Fat_value, CHOAVLDF = Carb_value, FIBTG = Fibre_value, ALC = Alcohol_value)  #alternatively:  standardised_kJ <- ENERCKj_standardised(PROT = 7.5, FAT = 1.3, CHOAVLDF = 50.5, FIBTG = 2.9, ALC = 0)  #data.frame calculation:  #First, an example dataframe is outlined and created -  test_df_WAFCT2019 <- data.frame( c(\"Bread, wheat, white, unfortified\", \"Beer, European (4.6% v/v alcohol)\", \"Maize, yellow, meal, whole grains, unfortified\", \"Sweet potato, yellow flesh, raw\", \"Cassava, tuber, white flesh, raw\"), c(7.5, 0.3, 9.4, 1.5, 1.3), c(1.3, 0, 3.7, 0.2, 0.3), c(50.5, 3.7, 65.2, 25.5, 31.6), c(2.9, 0, 9.4, 3, 3.7), c(0, 3.6, 0, NA, 0))  #Then, the columns are renamed:  colnames(test_df_WAFCT2019) <- c(\"food_name\", \"protein\", \"fat\", \"carbs\", \"fb\", \"alcohol\")  #Once renamed, the function is applied. the assigned output is a new column #in the data.frame, and the inputs are the different columns detailing the #relevant food nutrient values.  test_df_WAFCT2019$ENERCKj_stnd <- ENERCKj_standardised(          test_df_WAFCT2019$protein,          test_df_WAFCT2019$fat,          test_df_WAFCT2019$carbs,          test_df_WAFCT2019$fb,          test_df_WAFCT2019$alcohol)  print(test_df_WAFCT2019) #>                                        food_name protein fat carbs  fb alcohol #> 1               Bread, wheat, white, unfortified     7.5 1.3  50.5 2.9     0.0 #> 2              Beer, European (4.6% v/v alcohol)     0.3 0.0   3.7 0.0     3.6 #> 3 Maize, yellow, meal, whole grains, unfortified     9.4 3.7  65.2 9.4     0.0 #> 4                Sweet potato, yellow flesh, raw     1.5 0.2  25.5 3.0      NA #> 5               Cassava, tuber, white flesh, raw     1.3 0.3  31.6 3.7     0.0 #>   ENERCKj_stnd #> 1       1057.3 #> 2        172.4 #> 3       1480.3 #> 4        490.4 #> 5        600.0"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":null,"dir":"Reference","previous_headings":"","what":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"function reads two dataframes, comprised ID row name row. name rows matched based fuzzy search suggestions human confirmation using GUI interface.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"","code":"Fuzzy_Matcher(df1, df2, focus_term)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"df1 Required - primary dataframe, items need matches. dataframe must two columns size; first column must ID column, second must item names. df2 Required - secondary dataframe, list potential items match contents df1 . dataframe must two columns size; first column must ID column, second must item names. focus_term Optional - Specify string. string contained item name, fuzzy matcher opens wider potential list matches item.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"R object csv contains items df1 counterparts df2 row.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"GUI nature Fuzzy Matcher, R-based   description example able help guide using function   might standard R function. quick guide   created encourage examine, can found   https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert summary rows between groups of rows in a data frame — Group_Summariser","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"function analyses data frame, sorting based groups detailed group_ID_col, inserts summary/mean rows group. work data frame must structured group ID column sort, group item listed. data columns need averaged need numeric also. secondary option sorting items within groups, using secondary_sort_col parameter.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"","code":"Group_Summariser(   df,   group_ID_col,   secondary_sort_col,   input_weighting_column,   weighting_leniency = 0,   blank_cols = c(),   sep_row = F,   seq_col = F,   weighting_col = F,   round_weighting = T )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"df Required - data.frame summary rows need inserted . group_ID_col Required - column name specifying groups summary rows created . secondary_sort_col Optional - Specify column results sorted sorted groups. input_weighting_column Optional - Specify column contains set weightings. selected, weightings used summariser instead set average. partial weightings given item, remaining matches weightings split evenly . weighting_leniency Optional - default: 0 - Introduces forgiveness 'group weightings must equal 1' rule. cases using existing weightings can lead total weighting value equal 1 (particularly weightings rounded way using Group Summariser). inputted value sets range around 1 tool accept - e.g. input value 0.03 mean weighting total can 0.97 1.03. blank_cols Optional -  Specify lits column names wish leave blank average rows (e.g. metadata). Recommended run function , see results, check columns want list . sep_row Optional - default: 'F' - set TRUE, Summariser insert empty row summary row, help reading separation. column names listed must exactly match columns want excluded, character string; e.g. c(\"FCT Food Item Code\", \"FCT Food Name\") columns FCT Food Item Code FCT Food Name. seq_col Optional - default: 'F' - set TRUE, Summariser insert sequence column, numbering item goes summary row. weighting_col Optional - default: 'F' - set TRUE, Summariser insert weighting factor item goes summary row. round_weighting Optional - default: 'T' - set TRUE, Summariser round weighted value 2 decimal places.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"data.frame mirrors df, group summary row inserted, containing mean data columns.","code":""}]
