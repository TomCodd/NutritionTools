[{"path":"https://tomcodd.github.io/NutritionTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Codd. Author, maintainer. Lucia Segovia de la Revilla. Author, contributor.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Codd T, Segovia de la Revilla L (2023). NutritionTools: Tools Organisation, Matching, Calculation, Summarisation Nutrition Data. https://github.com/TomCodd/NutritionTools, https://tomcodd.github.io/NutritionTools/.","code":"@Manual{,   title = {NutritionTools: Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data},   author = {Thomas Codd and Lucia {Segovia de la Revilla}},   year = {2023},   note = {https://github.com/TomCodd/NutritionTools, https://tomcodd.github.io/NutritionTools/}, }"},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"NutritionTools R package functions help wide range calculations processes commonly occur working nutrition datasets. goal behind development automatically work, rather help nutritionists data scientists complete tasks quickly remaining full control decisions made, clear notation decisions made every step. Currently NutritionTools offers 6 tools help 4 key areas; Nutritional Calculations, Food Matching, Food Dataset Management, Output Summaries, although functions still development set added later time. NutritionTools developed work Micronutrient Action Policy Support (MAPS) Project, although use tools widely encouraged might find useful use exclusive MAPS project.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"can install latest version package github running following lines code:","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"TomCodd/NutritionTools\")"},{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"Open issue (GitHub issues bug reports, feature requests, function requests) NutritionTools R files (Github folder R files functions - like copy modify functions use, please , please retain original citation)","code":""},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"quick examples various function interfaces outputs. First main interface Fuzzy_Matcher Tool, highlighting potential matches across different nutritional datasets. Next output Group Summariser. less specific nutrition possible give example functionality using R’s built-datasets, summarise car data, grouped number cylinders.","code":"Fuzzy_Output <- Fuzzy_Matcher(TZ_FM, DJ_FM) mtcars_grouped_averages <- Group_Summariser(df = mtcars, group_ID_col = 'cyl', sep_row = T, round_weighting = T) print(mtcars_grouped_averages)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"function includes various ways calculating   standardised beta-carotene equivalents (CARTBEQ) value.   appropriate calculation selected based availability input   data.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"","code":"CARTBEQ_standardised(   df,   item_ID = \"fdc_id\",   CARTAmcg = \"CARTAmcg\",   CARTBmcg = \"CARTBmcg\",   CARTBEQmcg = \"CARTBEQmcg\",   CARTBEQmcg_std = \"CARTBEQmcg_std\",   CRYPXBmcg = \"CRYPXBmcg\",   VITAmcg = \"VITAmcg\",   VITA_RAEmcg = \"VITA_RAEmcg\",   RETOLmcg = \"RETOLmcg\",   comment_col = \"comments\",   compile = T,   carotene = T,   comment = T )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"df Required - data.frame data currently stored item_ID Required - default: 'fdc_id' - column contains data ID column name CARTAmcg Optional - default: 'CARTAmcg' - potential input variable; column contains data alpha-carotene micrograms CARTBmcg Optional - default: 'CARTBmcg' - potential input variable; column contains data beta-carotene micrograms CARTBEQmcg Optional - default: 'CARTBEQmcg' - potential input variable; column contains data beta-carotene equivalent micrograms CARTBEQmcg_std Optional - default: 'CARTBEQmcg_std' - potential input variable; column contains data standardised beta-carotene equivalent micrograms CRYPXBmcg OPtional - default: 'CRYPXBmcg' - potential input variable; column contains data beta-crpytoxanthin micrograms VITAmcg Optional - default: 'VITAmcg' - potential input variable; column contains data Vitamin-micrograms VITA_RAEmcg Optional - default: 'VITA_RAEmcg' - potential input variable; column contains data Vitamin-Retinol Activity Equivalents, micrograms RETOLmcg Optional - default: 'RETOLmcg' - potential input variable; column contains data Retinol micrograms comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question compile Optional - default: T - TRUE FALSE. compile set T (default), Beta-Carotene (CARTBmcg) available Beta-Carotene Eq. (CARTBEQ) used value Beta-Carotene equivalent (standardised). carotene Optional - default: T - TRUE FALSE. carotene set T (default), Beta-Carotene (CARTBmcg) available used value Beta-Carotene equivalent (standardised) comment Optional - default: T - TRUE FALSE. compile set T (default), function run description calculation used find CARTBEQ_standardised added comment_col. comment_col selected, comment = T, one created, called comments.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"data.frame mirrors df, new column -  recalculated_CARTBEQmcg_std - added. New comments may also added.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"Standardiser can use 6 different ways calculating   Beta-Carotene, case--case (row--row) basis ensure   item appropriate calculation used .   appropriate calculation completed (due incomplete input data)   next appropriate calculation used, .   calculations position hierarchy shown : 1. recalculated_CARTBEQmcg_std = CARTBmcg_value + 0.5*CARTAmcg_value       + 0.5*CRYPXBmcg_value. Beta-Carotene Equivalents (standardised) value       (CARTBEQ_std) calculated base elements, dependent valid       Alpha-Carotene (CARTA), Beta-Carotene (CARTB), Beta-Cryptoxanthin       CRYPXB) values. 2. recalculated_CARTBEQmcg_std = CARTBEQmcg_std_value.       base elements calculation unavailable, standardised       CARTBEQ value already exists, used. 3. recalculated_CARTBEQmcg_std = CARTBEQmcg _value. neither       base elements calculation standardised CARTBEQ value       unavailable non-standardised CARTBEQ value used       instead, exists. 4. recalculated_CARTBEQmcg_std = CARTBmcg _value. neither       base elements calculation, CARTBEQ value (standardised       otherwise) exist, Beta-Carotene (CARTB) value used       available. 5. recalculated_CARTBEQmcg_std = (VITA_RAEmcg_value -       RETOLmcg_value)*12. none available,       CATBEQ_std calculated Vitamin Retinol Activity Equivalent       (VITA_RAE) Retinol (RETOL). 6. recalculated_CARTBEQmcg_std = (VITAmcg_value -       RETOLmcg_value)*6. none available, CATBEQ_std       calculated Vitamin (VITA) Retinol (RETOL). hierarchy remains unchanged – however, equations hierarchy   can altered depending compile carotene input options.   set True, full list 6 equations made available.   compile == F, options 2 3 (use pre-existing CARTBEQ_std   CARTBEQ values) removed, meaning options 1, 4, 5, 6   available Hierarchy. Similarly, carotene == F, option 4 (  use pre-existing CARTB value) removed, leaving options 1, 5, 6   set false.   none options available (.e. data incomplete,   value can calculated fill-value used) CARTBEQ_std   value set NA.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"","code":"#The most common usage scenario will be covered. First we will create a test #data.frame with dummy data to use the function on. This function is designed #to be able to be used with patchy data - if certain columns are incomplete #then then the best calculation will be used on a row-by-row basis.  test_df <- data.frame( c( \"test_01\", \"test_02\", \"test_03\", \"test_04\", \"test_05\", \"test_06\", \"test_07\", \"test_08\", \"test_09\", \"test_10\" ), c( \"Merlot\", \"pinot grigio\", \"Chateauneuf-du-Pape\", \"Tokaji\", \"Champagne\", \"Sauvignon Blanc\", \"Chardonnay\", \"Malbec\", \"Cabernet Sauvignon\", \"Pinot Noir\" ), c(NA, 105, \"\", 130, NA, \"\", 111, NA, 112, 101), c(0, 35, 23, 27, 6, 34, NA, 18, \"\", 40), c(110, 67, 72, NA, 160, 102, 98, 37, 28, 60), c(\"\", 107, 102, NA, \"\", NA, 72, \"\", \"\", 143), c(159, 103, 132, NA, \"\", \"\", \"\", 78, NA, 92), c(13, 8, NA, 15, 13, NA, NA, NA, 7, 10), c(12, 11, 8, 13, 3, 1, 10, 15, 3, 6), c(0, 7, 12, NA, 5, 2, 10, 6, \"\", 1), c( \"Real values, but for Maize, not Merlot\", \"Completely fictional values\", \"Fictional values #2\", \"More fictional values\", \"Fictional #4\", \"Fictional no. 5\", \"fictional 6\", \"more fiction\", \"again, fiction\", \"Fictional number 9\" ) )  colnames(test_df) <- c( \"ID\", \"food_name\", \"CART B (mcg)\", \"CART A (mcg)\", \"CRYPXB (mcg)\", \"CART B eq (std) (mcg)\", \"CART B eq (mcg)\", \"Vit A RAE (mcg)\", \"Vit A (mcg)\", \"Retinol (mcg)\", \"comments\" )  #In this case the data.frame we want to run through is called test_df. #However the standard INFOODS names haven't been used, so the assumed nutrient #column names won't work, and they will have to be manually assigned. However, #the comment column is named the default name (comments) and so even if left #out will still be valid.  output_df <- CARTBEQ_standardised(df = test_df, item_ID = 'ID', CARTAmcg = 'CART A (mcg)', CARTBmcg = 'CART B (mcg)', CARTBEQmcg = 'CART B eq (mcg)', CARTBEQmcg_std = 'CART B eq (std) (mcg)',  CRYPXBmcg = 'CRYPXB (mcg)', VITAmcg = 'Vit A (mcg)',  VITA_RAEmcg = 'Vit A RAE (mcg)',  RETOLmcg = 'Retinol (mcg)') #> Item test_01 CARTBEQ_standardised calculated to be 159mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg value. #> Item test_02 CARTBEQ_standardised calculated to be 156mcg. CARTBEQ_standardised calculated using standard equation. #> Item test_03 CARTBEQ_standardised calculated to be 102mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_04 CARTBEQ_standardised calculated to be 130mcg. CARTBEQ_standardised compiled from previous CARTBmcg value. #> Item test_05 CARTBEQ_standardised calculated to be 96mcg. CARTBEQ_standardised calculated from VITA_RAE and RETOL. #> Item test_06 CARTBEQ_standardised calculated to be 0mcg. CARTBEQ_standardised calculated from VITA and RETOL - recalculated_CARTBEQmcg_std calculated to be less than 0. Value reset to 0. #> Item test_07 CARTBEQ_standardised calculated to be 72mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_08 CARTBEQ_standardised calculated to be 78mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg value. #> Item test_09 CARTBEQ_standardised calculated to be 112mcg. CARTBEQ_standardised compiled from previous CARTBmcg value. #> Item test_10 CARTBEQ_standardised calculated to be 151mcg. CARTBEQ_standardised calculated using standard equation.  #The resulting output will have a modified comments column, and a new column - #recalculated_CARTBEQmcg_std"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":null,"dir":"Reference","previous_headings":"","what":"A tool to test the integrity of a decimal system in a dataframe. — Decimal_System_Checker","title":"A tool to test the integrity of a decimal system in a dataframe. — Decimal_System_Checker","text":"function reads dataframe, well names 2-4   columns comprise decimal system within dataframe.   checks integrity series decimal identities row   rest decimal identities within row, picking   inconsistencies. inconsistencies reported, eith console messages   error report dataframe.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tool to test the integrity of a decimal system in a dataframe. — Decimal_System_Checker","text":"","code":"Decimal_System_Checker(df, first, second, third, fourth)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A tool to test the integrity of a decimal system in a dataframe. — Decimal_System_Checker","text":"df Required - data frame containing decimal system. first Required - first column decimal system - basic item ID; e.g. 01 . second Required - second column decimal system - first subdivision base ID; e.g. 01.005 . third Optional - third column decimal system - second subdivision base ID first second ID; e.g. 01.005.03 . fourth Optional - fourth column decimal system - third subdivision base ID, second subdivision second ID, first subdivision third ID; e.g. 01.005.03.01 .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tool to test the integrity of a decimal system in a dataframe. — Decimal_System_Checker","text":"R dataframe detailing errors found item   decimal system.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A tool to test the integrity of a decimal system in a dataframe. — Decimal_System_Checker","text":"","code":"#Two examples will be covered - one that results in the output error table, #another that produces the output messages only (not recommended for large #dataframes).  #First, we must create a test dataframe: test_df <- data.frame( c(\"Merlot\", \"pinot grigio\", \"Chateauneuf-du-Pape\", \"Tokaji\", \"Champagne\", \"Sauvignon Blanc\", \"Chardonnay\", \"Malbec\"), c(\"01\", \"01\", \"01\", \"01\", \"02\", \"02\", \"02\", \"02\"), c(\"02.01\", \"01.01\", \"01.02\", \"01.02\", \"02.01\", \"02.01\", \"02.02\", \"02.02\"), c(\"02.01.0111\", \"01.01.0131\", \"01.02.0001\", \"01.02.2031\", \"02.01.1001\", \"02.01.1001\", \"02.02.3443\", \"02.03.4341\"), c(\"02.01.0111.01\", \"01.01.0131.04\", \"01.02.0001.01\", \"01.02.2031.03\", \"02.01.1001.06\", \"02.01.1001.06\", \"02.01.3443.02\", \"02.02.4341.03\") )    #Then we should rename the columns of the dataframe:    colnames(test_df) <-     c(\"Wine names\",       \"ID1\",       \"ID2\",       \"ID3\",       \"ID4\"     )   #This first line runs the dataframe, and has an output variable listed. This  #means that as well as putting a message in the console when an error is  #found, all the error reports will be saved to a dataframe too.   output_test <- Decimal_System_Checker(test_df, first = \"ID1\", second =  \"ID2\", third = \"ID3\", fourth = \"ID4\") #> Tertiary decimal level used #>  #> Quaternary decimal level used #>  #> duplicate codes found in fourth level: 02.01.1001.06 #> [1] \"02.01.0111.01\" #> The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> [1] \"02.01.3443.02\" #> The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> [1] \"02.02.4341.03\" #> The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02.   #However, if we only want to get the readouts and not have an error  #dataframe to refer back to, then the code can be run like so:   Decimal_System_Checker(test_df, first = \"ID1\", second = \"ID2\", third =  \"ID3\", fourth = \"ID4\") #> Tertiary decimal level used #>  #> Quaternary decimal level used #>  #> duplicate codes found in fourth level: 02.01.1001.06 #> [1] \"02.01.0111.01\" #> The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> [1] \"02.01.3443.02\" #> The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> [1] \"02.02.4341.03\" #> The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02. #>   primary code secondary code tertiary code quaternary code #> 1           01          02.01    02.01.0111   02.01.0111.01 #> 5           02          02.01    02.01.1001   02.01.1001.06 #> 6           02          02.01    02.01.1001   02.01.1001.06 #> 7           02          02.02    02.02.3443   02.01.3443.02 #> 8           02          02.02    02.03.4341   02.02.4341.03 #>                                                                                                                                                                                                                                                                                                        error #> 1 The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. - The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. - The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> 5                                                                                                                                                                                                                                                       duplicate codes found in fourth level: 02.01.1001.06 #> 6                                                                                                                                                                                                                                                       duplicate codes found in fourth level: 02.01.1001.06 #> 7                                                                                                                                                                                               The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> 8                                                                                                                                                                                                    The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02.   #This will do the same thing as the previous run, producing error printouts,  #but it will not create an error report dataframe."},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"A function used to calculate standardized Energy values in kcal. — ENERCKcal_standardised","title":"A function used to calculate standardized Energy values in kcal. — ENERCKcal_standardised","text":"function works basic calculator - values Total   Protein grams 'PROTg', Total Fat grams (ideally standardised)   'FATg_standardised', Available Carbohydrate grams   'CHOAVLDFg', Fibre, Total Dietary grams 'FIBTGg'   Alcohol grams 'ALCg' combined fins Energy kcal.   Alcohol optional, whereas inputs required - Alcohol   missing assumed 0.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function used to calculate standardized Energy values in kcal. — ENERCKcal_standardised","text":"","code":"ENERCKcal_standardised(PROTg, FATg_standardised, CHOAVLDFg, FIBTGg, ALCg)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function used to calculate standardized Energy values in kcal. — ENERCKcal_standardised","text":"PROTg Required - Total Protein value (grams) food item examined. FATg_standardised Required - Total Fat value (grams) food item examined. CHOAVLDFg Required - Total Available Carbohydrate value (grams) food item examined. FIBTGg Required - Total Dietary Fibre value (grams) food item examined. ALCg Optional - Total Alcohol value (grams) food item examined.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function used to calculate standardized Energy values in kcal. — ENERCKcal_standardised","text":"calculated Energy value kcal.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function used to calculate standardized Energy values in kcal. — ENERCKcal_standardised","text":"","code":"#Three examples will be covered - two variants for a one-off #calculation, and to create a column with the calculated results.  #Single calculation:  #Bread, wheat, white, unfortified  Protein_value <- 7.5 Fat_value <- 1.3 Carb_value <- 50.5 Fibre_value <- 2.9 Alcohol_value <- 0  standardised_kcal <- ENERCKcal_standardised(PROT = Protein_value, FAT = Fat_value, CHOAVLDF = Carb_value, FIBTG = Fibre_value, ALC = Alcohol_value)  #alternatively:  standardised_kcal <- ENERCKcal_standardised(PROT = 7.5, FAT = 1.3, CHOAVLDF = 50.5, FIBTG = 2.9, ALC = 0)  #data.frame calculation:  #First, an example dataframe is outlined and created -  test_df_WAFCT2019 <- data.frame( c(\"Bread, wheat, white, unfortified\", \"Beer, European (4.6% v/v alcohol)\", \"Maize, yellow, meal, whole grains, unfortified\", \"Sweet potato, yellow flesh, raw\", \"Cassava, tuber, white flesh, raw\"), c(7.5, 0.3, 9.4, 1.5, 1.3), c(1.3, 0, 3.7, 0.2, 0.3), c(50.5, 3.7, 65.2, 25.5, 31.6), c(2.9, 0, 9.4, 3, 3.7), c(0, 3.6, 0, NA, 0))  #Then, the columns are renamed:  colnames(test_df_WAFCT2019) <- c(\"food_name\", \"protein\", \"fat\", \"carbs\", \"fb\", \"alcohol\")  #Once renamed, the function is applied. the assigned output is a new column #in the data.frame, and the inputs are the different columns detailing the #relevant food nutrient values.  test_df_WAFCT2019$ENERCKcal_stnd <- ENERCKcal_standardised(          test_df_WAFCT2019$protein,          test_df_WAFCT2019$fat,          test_df_WAFCT2019$carbs,          test_df_WAFCT2019$fb,          test_df_WAFCT2019$alcohol)  print(test_df_WAFCT2019) #>                                        food_name protein fat carbs  fb alcohol #> 1               Bread, wheat, white, unfortified     7.5 1.3  50.5 2.9     0.0 #> 2              Beer, European (4.6% v/v alcohol)     0.3 0.0   3.7 0.0     3.6 #> 3 Maize, yellow, meal, whole grains, unfortified     9.4 3.7  65.2 9.4     0.0 #> 4                Sweet potato, yellow flesh, raw     1.5 0.2  25.5 3.0      NA #> 5               Cassava, tuber, white flesh, raw     1.3 0.3  31.6 3.7     0.0 #>   ENERCKcal_stnd #> 1          249.5 #> 2           41.2 #> 3          350.5 #> 4          115.8 #> 5          141.7"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"A function used to calculate standardized Energy values in kJ. — ENERCKj_standardised","title":"A function used to calculate standardized Energy values in kJ. — ENERCKj_standardised","text":"function works basic calculator - values Total   Protein grams 'PROTg', Total Fat grams (ideally standardised)   'FATg_standardised', Available Carbohydrate grams   'CHOAVLDFg', Fibre, Total Dietary grams 'FIBTGg'   Alcohol grams 'ALCg' combined fins Energy kj.   Alcohol optional, whereas inputs required - Alcohol   missing assumed 0.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function used to calculate standardized Energy values in kJ. — ENERCKj_standardised","text":"","code":"ENERCKj_standardised(PROTg, FATg_standardised, CHOAVLDFg, FIBTGg, ALCg)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function used to calculate standardized Energy values in kJ. — ENERCKj_standardised","text":"PROTg Required - Total Protein value (grams) food item examined. FATg_standardised Required - Total Fat value (grams) food item examined. CHOAVLDFg Required - Total Available Carbohydrate value (grams) food item examined. FIBTGg Required - Total Dietary Fibre value (grams) food item examined. ALCg Optional - Total Alcohol value (grams) food item examined.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function used to calculate standardized Energy values in kJ. — ENERCKj_standardised","text":"calculated Energy value kJ.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function used to calculate standardized Energy values in kJ. — ENERCKj_standardised","text":"","code":"#Three examples will be covered - two variants for a one-off #calculation, and to create a column with the calculated results.  #Single calculation:  #Bread, wheat, white, unfortified  Protein_value <- 7.5 Fat_value <- 1.3 Carb_value <- 50.5 Fibre_value <- 2.9 Alcohol_value <- 0  standardised_kJ <- ENERCKj_standardised(PROT = Protein_value, FAT = Fat_value, CHOAVLDF = Carb_value, FIBTG = Fibre_value, ALC = Alcohol_value)  #alternatively:  standardised_kJ <- ENERCKj_standardised(PROT = 7.5, FAT = 1.3, CHOAVLDF = 50.5, FIBTG = 2.9, ALC = 0)  #data.frame calculation:  #First, an example dataframe is outlined and created -  test_df_WAFCT2019 <- data.frame( c(\"Bread, wheat, white, unfortified\", \"Beer, European (4.6% v/v alcohol)\", \"Maize, yellow, meal, whole grains, unfortified\", \"Sweet potato, yellow flesh, raw\", \"Cassava, tuber, white flesh, raw\"), c(7.5, 0.3, 9.4, 1.5, 1.3), c(1.3, 0, 3.7, 0.2, 0.3), c(50.5, 3.7, 65.2, 25.5, 31.6), c(2.9, 0, 9.4, 3, 3.7), c(0, 3.6, 0, NA, 0))  #Then, the columns are renamed:  colnames(test_df_WAFCT2019) <- c(\"food_name\", \"protein\", \"fat\", \"carbs\", \"fb\", \"alcohol\")  #Once renamed, the function is applied. the assigned output is a new column #in the data.frame, and the inputs are the different columns detailing the #relevant food nutrient values.  test_df_WAFCT2019$ENERCKj_stnd <- ENERCKj_standardised(          test_df_WAFCT2019$protein,          test_df_WAFCT2019$fat,          test_df_WAFCT2019$carbs,          test_df_WAFCT2019$fb,          test_df_WAFCT2019$alcohol)  print(test_df_WAFCT2019) #>                                        food_name protein fat carbs  fb alcohol #> 1               Bread, wheat, white, unfortified     7.5 1.3  50.5 2.9     0.0 #> 2              Beer, European (4.6% v/v alcohol)     0.3 0.0   3.7 0.0     3.6 #> 3 Maize, yellow, meal, whole grains, unfortified     9.4 3.7  65.2 9.4     0.0 #> 4                Sweet potato, yellow flesh, raw     1.5 0.2  25.5 3.0      NA #> 5               Cassava, tuber, white flesh, raw     1.3 0.3  31.6 3.7     0.0 #>   ENERCKj_stnd #> 1       1057.3 #> 2        172.4 #> 3       1480.3 #> 4        490.4 #> 5        600.0"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":null,"dir":"Reference","previous_headings":"","what":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"function reads two dataframes, comprised ID row name row. name rows matched based fuzzy search suggestions human confirmation using GUI interface.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"","code":"Fuzzy_Matcher(df1, df2, focus_term)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"df1 Required - primary data frame, items need matches. first column must ID column, second must item names. df2 Required - secondary data frame, list potential items match contents df1 . first column must ID column, second must item names. focus_term Optional - Specify string. string contained item name, fuzzy matcher opens wider potential list matches item.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy\nstring search — Fuzzy_Matcher","text":"R object csv contains items df1 counterparts df2 row.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert summary rows between groups of rows in a data frame — Group_Summariser","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"function analyses data frame, sorting based groups detailed group_ID_col, inserts summary/mean rows group. work data frame must structured group ID column sort, group item listed. data columns need averaged need numeric also. secondary option sorting items within groups, using secondary_sort_col parameter.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"","code":"Group_Summariser(   df,   group_ID_col,   secondary_sort_col,   input_weighting_column,   blank_cols = c(),   sep_row = F,   seq_col = F,   weighting_col = F,   round_weighting = T )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"df Required - data.frame summary rows need inserted . group_ID_col Required - column name specifying groups summary rows created . secondary_sort_col Optional - Specify column results sorted sorted groups. input_weighting_column Optional - Specify column contains set weightings. selected, weightings used summariser instead set average. partial weightings given item, remaining matches weightings split evenly . blank_cols Optional - Specify lits column names wish leave blank average rows (e.g. metadata). Recommended run function , see results, check columns want list . sep_row Optional - default: 'F' - set TRUE, Summariser insert empty row summary row, help reading separation. column names listed must exactly match columns want excluded, character string; e.g. c(\"FCT Food Item Code\", \"FCT Food Name\") columns FCT Food Item Code FCT Food Name. seq_col Optional - default: 'F' - set TRUE, Summariser insert sequence column, numbering item goes summary row. weighting_col Optional - default: 'F' - set TRUE, Summariser insert weighting factor item goes summary row. round_weighting Optional - default: 'T' - set TRUE, Summariser round weighted value 2 decimal places.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"data.frame mirrors df, group summary row inserted, containing mean data columns.","code":""}]
