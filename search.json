[{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"introduction","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Introduction","title":"Fuzzy-Matcher-Guide","text":"Fuzzy Matchers GUI interface, standard R function documentation ill-suited helping use. Instead guide created guide using function.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"data-prep","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Data Prep","title":"Fuzzy-Matcher-Guide","text":"first step using Fuzzy Matcher prepare datasets like match. Fuzzy Matcher requires two different data frames input, optional key word. example, create two data frames match items .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"r-setup","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep","what":"R setup","title":"Fuzzy-Matcher-Guide","text":"First load required packages. NutritionTools package, contains Fuzzy Matcher, need. dplyr package widely used contains many useful tools. also dependency NutritionTools, already installed system. data prep methods can done dplyr instead base R, methods shown - requiring called now. , create two example data frames - breakfast_df extensive_food_db. data frames matching .","code":"library(NutritionTools) library(dplyr) breakfast_df <-   data.frame(     \"ID\" = c(       \"test_01\",       \"test_02\",       \"test_03\",       \"test_04\",       \"test_05\",       \"test_06\",       \"test_07\"     ),     \"food_name\" = c(       \"Wholemeal Bread\",       \"Ground Pepper\",       \"whole milk\",       \"Orange Juice\",       \"Butter, salted\",       \"Salt\",       \"Eggs\"     ),     \"CART B (mcg)\" = c(NA, 105, \"\", 130, NA, \"\", 111),     \"CART A (mcg)\" = c(0, 35, 23, 27, 6, 34, NA),     \"CRYPXB (mcg)\" = c(110, 67, 72, NA, 160, 102, 98),     \"CART B eq (std) (mcg)\" = c(\"\", 107, 102, NA, \"\", NA, 72),     \"CART B eq (mcg)\" = c(159, 103, 132, NA, \"\", \"\", \"\"),     \"Vit A RAE (mcg)\" = c(13, 8, NA, 15, 13, NA, NA),     \"Vit A (mcg)\" = c(12, 11, 8, 13, 3, 1, 10),     \"Retinol (mcg)\" = c(0, 7, 12, NA, 5, 2, 10),     \"comments\" = c(       \"Imaginary values\",       \"Completely fictional values\",       \"Fictional values #2\",       \"More fictional values\",       \"Fictional #4\",       \"Fictional no. 5\",       \"fictional 6\"     ), check.names = F   )  extensive_food_db <- data.frame(     \"item_ID\" = c(       \"01_01\",       \"01_02\",       \"01_03\",       \"01_04\",       \"01_05\",       \"01_06\",       \"01_07\",       \"01_08\",       \"01_09\",       \"01_10\",       \"01_11\",       \"01_12\",       \"01_13\",       \"01_14\",       \"01_15\",       \"01_16\",       \"01_17\",       \"01_18\",       \"01_19\",       \"01_20\"     ),     \"food_item_name\" = c(       \"Bread (wholemeal)\",       \"Pepper, ground, black\",       \"Milk, cow, whole, fresh, raw\",       \"Orange Juice\",       \"Butter, with salt\",       \"Salt\",       \"Egg, chicken, whole, raw\",       \"Bacon\",       \"Sausage\",       \"Milk, skimmed\",       \"Butter, unsalted\",       \"Bread (white)\",       \"Bread (Brown), wheat flour\",       \"Tomato\",       \"Mushroom\",       \"Parsley\",       \"Tomato, tinned\",       \"Apple Juice\",       \"Pineapple Juice\",       \"Mango Juice\"       ),     \"Iron (Fe)\" = c(12, 11, 8, 13, 3, 1, 10, 15, 3, 80, 14, 27, 54, 12, 7, 3, 7, 15, 10, 45),     \"Selenium (Se)\" = c(0, 35, 23, 27, 6, 34, NA, 23, 10, 8, 6, 15, NA, \"\", 20, 12, 18, 20, 12, 20),     \"Zinc (Zn)\" = c(13, 8, NA, 15, 13, NA, NA, 10, 8, 9, 4, 3, 2, 10, 8, 6, 14, 13, 21, 6),     \"comments\" = c(       \"These are imaginary\",       \"Really fictional values\",       \"Fictional values again\",       \"More fictions\",       \"imaginary #4\",       \"imaginary no. 5\",       \"imaginary 6\",       \"More fiction\",       \"complete fiction\",       \"again, fantasy\",       \"Fantasy again\",       \"once again, imaginary\",       \"complete fiction\",       \"and again, imaginary\",       \"this ones real (only joking)\",       \"knock knock\",       \"who's there?\",       \"cow says\",       \"cow says who?\",       \"no, cow says moo!\"     ), check.names = F   )"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"data-preparation","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep","what":"Data preparation","title":"Fuzzy-Matcher-Guide","text":"Fuzzy Matcher, mentioned description, certain data frame input requirements - namely data frames 2 columns size, first column ID column, second food item name. order create ideal data frame, subset 2 original input columns.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"subsetting-with-base-r","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep > Data preparation","what":"Subsetting with base R","title":"Fuzzy-Matcher-Guide","text":"first method use base R functions. Using square brackets, can tell R want two columns, selected columns 1 2, order - column 1 ID column want, column 2 item name want. order selection important - data frame set differently, ID column , example, column 4, item names column 1, command instead [,c(4,1)] - first column list 4 ID , item name column (1).","code":"breakfast_df_2col <- breakfast_df[,c(1,2)] extensive_food_db_2col <- extensive_food_db[,c(1,2)]"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"subsetting-with-dplyr","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Data Prep > Data preparation","what":"Subsetting with dplyr","title":"Fuzzy-Matcher-Guide","text":"methods make use select function dplyr package. Using dplyr select tool, instead picking columns want column numbers, instead selecting column names - selecting ID column name first, food name column. methods identical outputs.","code":"breakfast_df_2col <- breakfast_df %>% select(\"ID\", \"food_name\") extensive_food_db_2col <- extensive_food_db %>% select(\"item_ID\", \"food_item_name\")"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"calling-the-fuzzy-matcher","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Calling the Fuzzy Matcher","title":"Fuzzy-Matcher-Guide","text":"order call Fuzzy Matcher simply use following command: Deciding data frame df1 df2 important certain applications. general rule larger dataset df2 - list items df1 search matches. Please note: matching larger datasets step can take seconds process moving .","code":"Fuzzy_Matcher(df1 = breakfast_df_2col, df2 = extensive_food_db_2col)"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"optional-command-focus_term","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Calling the Fuzzy Matcher","what":"Optional command: focus_term","title":"Fuzzy-Matcher-Guide","text":"called Fuzzy Matcher look similarity food item names , potential matches close enough, rank top 5 pick . additional input command can use, focus_term. word can specify. specified, word appears potential match, selection requirements showing match reduced. means option pick wider range items food item name contains focus_term. useful , example, need prioritise matching food items contain ‘raw’ term - potential matches shown. extra matches technically ones fuzzy matcher doesn’t think good match, still might give options decide . use focus term example, command :","code":"Fuzzy_Matcher(df1 = breakfast_df_2col, df2 = extensive_food_db_2col, focus_term = \"raw\")"},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"matching-using-the-fuzzy-matcher","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Matching using the Fuzzy Matcher","title":"Fuzzy-Matcher-Guide","text":"potential matches found, Fuzzy Matcher open pop-window, interactive table .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"selecting-matches","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Matching using the Fuzzy Matcher","what":"Selecting Matches","title":"Fuzzy-Matcher-Guide","text":"table contains 7 columns - ID item name column df1, ID item name column df2, ‘Correct Match’ tickbox column select correct potential match , ‘Confidence’ column select match confidence .  item df1 can 5 potential matches df2 - can see image, Orange Juice 3 potential matches; Orange Juice, Apple Juice, Mango Juice. case believe Orange Juice matched Orange Juice, select tickbox row contains match. soon potential matches Orange Juice get dropped bottom table, longer selectable - prevent accidental multimatching single item.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"match-confidences","dir":"Articles","previous_headings":"Fuzzy Matcher Guide > Matching using the Fuzzy Matcher","what":"Match confidences","title":"Fuzzy-Matcher-Guide","text":"match, confidence value must selected. 3 potential confidence values pick - High, Medium, Low.  example, matching ‘milk, whole, (cows), raw’ ‘whole, raw cows milk’ might marked high confidence - sure factors match correct. Matching ‘whole cows milk’ ‘whole, raw cows milk’ might medium confidence match, depending important think raw . Matching ‘milk’ ‘whole, raw cows milk’ might low confidence - assuming cows milk, ’re assuming whole milk, ’re assuming pasturised. individual’s organisations definition constitutes high, medium low match subjective potentially use-dependent, values give good range potential inputs pick . believe Orange Juice match high confidence match, option pick.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"finishing-the-matching","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"Finishing the Matching","title":"Fuzzy-Matcher-Guide","text":"correct matches completed, table look something like :  done select “matches identified” button top-left page. open another pop-window, giving options saving matches.  first option checkbox, asking whether want strip match data back bare bones required relink data - selected output contain item ID df1, item ID df2, match confidence, table. isn’t selected output contain food item names well. option save R object, save matches csv. R object selected data frame output variable name specified save options appear continue work . csv option selected, csv created R projects root location, tidied version save file name selected. options want selected, finished using Fuzzy Matcher - new pop-window appear stats session (number matches long took), click close option, Fuzzy Matcher close.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","id":"after-the-fuzzy-matcher","dir":"Articles","previous_headings":"Fuzzy Matcher Guide","what":"After the Fuzzy Matcher","title":"Fuzzy-Matcher-Guide","text":"matches outputted, easy re-link output original files. merge tool links items multiple datasets provided matching ID’s matching ID column names. stripped version Fuzzy matcher output automatically restores ID column names originals respective data frame (ID item_ID), merging can done easily. code chunk comprises two merges - first one merging fuzzy matcher outputs breakfast_df data frame, output merge merged extensive_food_db data frame. example Fuzzy Matcher Output called ‘fuzzy_match_outputs’.","code":"fm_outputs_merged <- merge(fuzzy_match_outputs, breakfast_df, \"ID\")  fm_outputs_merged <- merge(fm_outputs_merged, extensive_food_db, \"item_ID\")"},{"path":"https://tomcodd.github.io/NutritionTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Codd. Author, maintainer.            https://github.com/TomCodd Lucia Segovia de la Revilla. Author, contributor.            https://github.com/LuciaSegovia","code":""},{"path":"https://tomcodd.github.io/NutritionTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Codd T, Segovia de la Revilla L (2024). NutritionTools: Tools Organisation, Matching, Calculation, Summarisation Nutrition Data. R package version 1.0.1, https://tomcodd.github.io/NutritionTools/, https://github.com/TomCodd/NutritionTools.","code":"@Manual{,   title = {NutritionTools: Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data},   author = {Thomas Codd and Lucia {Segovia de la Revilla}},   year = {2024},   note = {R package version 1.0.1, https://tomcodd.github.io/NutritionTools/},   url = {https://github.com/TomCodd/NutritionTools}, }"},{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"NutritionTools R package functions help wide range calculations processes commonly occur working nutrition datasets. goal behind development automatically work, rather help nutritionists data scientists complete tasks quickly remaining full control decisions made, clear notation decisions made every step. Currently NutritionTools offers 6 tools help 4 key areas; Nutritional Calculations, Food Matching, Food Dataset Management, Output Summaries, although functions still development set added later time. NutritionTools developed work Micronutrient Action Policy Support (MAPS) Project, although use tools widely encouraged might find useful use exclusive MAPS project.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"can install latest version package github running following lines code:","code":"if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"TomCodd/NutritionTools\")"},{"path":[]},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"Open issue (GitHub issues bug reports, feature requests, function requests) NutritionTools R files (Github folder R files functions - like copy modify functions use, please , please retain original citation)","code":""},{"path":"https://tomcodd.github.io/NutritionTools/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Tools for the Organisation, Matching, Calculation, and Summarisation of Nutrition Data","text":"quick examples various function interfaces outputs. First main interface Fuzzy_Matcher Tool, highlighting potential matches across different nutritional datasets. Next output Group Summariser. less specific nutrition possible give example functionality using R’s built-datasets, summarise car data, grouped number cylinders.","code":"Fuzzy_Output <- Fuzzy_Matcher(TZ_FM, DJ_FM) mtcars_grouped_averages <- Group_Summariser(df = mtcars, group_ID_col = 'cyl', sep_row = T, round_weighting = T) print(mtcars_grouped_averages)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"function includes various ways calculating   standardised beta-carotene equivalents (CARTBEQ) value.   appropriate calculation selected based availability input   data.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"","code":"CARTBEQ_standardised(   df,   item_ID = \"fdc_id\",   CARTAmcg = \"CARTAmcg\",   CARTBmcg = \"CARTBmcg\",   CARTBEQmcg = \"CARTBEQmcg\",   CARTBEQmcg_std = \"CARTBEQmcg_std\",   CRYPXBmcg = \"CRYPXBmcg\",   VITAmcg = \"VITAmcg\",   VITA_RAEmcg = \"VITA_RAEmcg\",   RETOLmcg = \"RETOLmcg\",   comment_col = \"comments\",   compile = T,   carotene = T,   comment = T )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"df Required - data.frame data currently stored item_ID Required - default: 'fdc_id' - column contains data ID column name CARTAmcg Optional - default: 'CARTAmcg' - potential input variable; column contains data alpha-carotene micrograms CARTBmcg Optional - default: 'CARTBmcg' - potential input variable; column contains data beta-carotene micrograms CARTBEQmcg Optional - default: 'CARTBEQmcg' - potential input variable; column contains data beta-carotene equivalent micrograms CARTBEQmcg_std Optional - default: 'CARTBEQmcg_std' - potential input variable; column contains data standardised beta-carotene equivalent micrograms CRYPXBmcg OPtional - default: 'CRYPXBmcg' - potential input variable; column contains data beta-crpytoxanthin micrograms VITAmcg Optional - default: 'VITAmcg' - potential input variable; column contains data Vitamin-micrograms VITA_RAEmcg Optional - default: 'VITA_RAEmcg' - potential input variable; column contains data Vitamin-Retinol Activity Equivalents, micrograms RETOLmcg Optional - default: 'RETOLmcg' - potential input variable; column contains data Retinol micrograms comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question compile Optional - default: T - TRUE FALSE. compile set T (default), Beta-Carotene (CARTBmcg) available Beta-Carotene Eq. (CARTBEQ) used value Beta-Carotene equivalent (standardised). carotene Optional - default: T - TRUE FALSE. carotene set T (default), Beta-Carotene (CARTBmcg) available used value Beta-Carotene equivalent (standardised) comment Optional - default: T - TRUE FALSE. compile set T (default), function run description calculation used find CARTBEQ_standardised added comment_col. comment_col selected, comment = T, one created, called comments.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"data.frame mirrors df, new column -   recalculated_CARTBEQmcg_std - added. New comments may also added.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"Standardiser can use 6 different ways calculating   Beta-Carotene, case--case (row--row) basis ensure   item appropriate calculation used .   appropriate calculation completed (due incomplete input data)   next appropriate calculation used, .   calculations position hierarchy shown : 1. recalculated_CARTBEQmcg_std = CARTBmcg_value + 0.5*CARTAmcg_value       + 0.5*CRYPXBmcg_value. Beta-Carotene Equivalents (standardised) value       (CARTBEQ_std) calculated base elements, dependent valid       Alpha-Carotene (CARTA), Beta-Carotene (CARTB), Beta-Cryptoxanthin       CRYPXB) values. 2. recalculated_CARTBEQmcg_std = CARTBEQmcg_std_value.       base elements calculation unavailable, standardised       CARTBEQ value already exists, used. 3. recalculated_CARTBEQmcg_std = CARTBEQmcg _value. neither       base elements calculation standardised CARTBEQ value       unavailable non-standardised CARTBEQ value used       instead, exists. 4. recalculated_CARTBEQmcg_std = CARTBmcg _value. neither       base elements calculation, CARTBEQ value (standardised       otherwise) exist, Beta-Carotene (CARTB) value used       available. 5. recalculated_CARTBEQmcg_std = (VITA_RAEmcg_value -       RETOLmcg_value)*12. none available,       CATBEQ_std calculated Vitamin Retinol Activity Equivalent       (VITA_RAE) Retinol (RETOL). 6. recalculated_CARTBEQmcg_std = (VITAmcg_value -       RETOLmcg_value)*6. none available, CATBEQ_std       calculated Vitamin (VITA) Retinol (RETOL). hierarchy remains unchanged – however, equations hierarchy   can altered depending compile carotene input options.   set True, full list 6 equations made available.   compile == F, options 2 3 (use pre-existing CARTBEQ_std   CARTBEQ values) removed, meaning options 1, 4, 5, 6   available Hierarchy. Similarly, carotene == F, option 4 (  use pre-existing CARTB value) removed, leaving options 1, 5, 6   set false.   none options available (.e. data incomplete,   value can calculated fill-value used) CARTBEQ_std   value set NA.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CARTBEQ_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a standardised CARTBEQ value from various inputs — CARTBEQ_standardised","text":"","code":"#The most common usage scenario will be covered. First we will create a test #data.frame with dummy data to use the function on. This function is designed #to be able to be used with patchy data - if certain columns are incomplete #then then the best calculation will be used on a row-by-row basis.  test_df <- data.frame( ID = c(\"test_01\", \"test_02\", \"test_03\", \"test_04\", \"test_05\", \"test_06\", \"test_07\", \"test_08\", \"test_09\", \"test_10\" ), food_name = c(\"Bread (wholemeal)\", \"Pepper, ground, black\", \"Milk, cow, whole, fresh, raw\", \"Orange Juice\", \"Butter (cow milk), salted\", \"Salt, Iodized\", \"Egg, chicken, whole, raw\", \"Tomato, red, ripe, raw\", \"Mushroom, fresh, raw\", \"Parsley, fresh, raw\"), \"CART B (mcg)\" = c(NA, 105, \"\", 130, NA, \"\", 111, NA, 112, 101), \"CART A (mcg)\" = c(0, 35, 23, 27, 6, 34, NA, 18, \"\", 40), \"CRYPXB (mcg)\" = c(110, 67, 72, NA, 160, 102, 98, 37, 28, 60), \"CART B eq (std) (mcg)\" = c(\"\", 107, 102, NA, \"\", NA, 72, \"\", \"\", 143), \"CART B eq (mcg)\" = c(159, 103, 132, NA, \"\", \"\", \"\", 78, NA, 92), \"Vit A RAE (mcg)\" = c(13, 8, NA, 15, 13, NA, NA, NA, 7, 10), \"Vit A (mcg)\" = c(12, 11, 8, 13, 3, 1, 10, 15, 3, 6), \"Retinol (mcg)\" = c(0, 7, 12, NA, 5, 2, 10, 6, \"\", 1), \"comments\" = c( \"Imaginary values\", \"Completely fictional values\", \"Fictional values #2\", \"More fictional values\", \"Fictional #4\", \"Fictional no. 5\", \"fictional 6\", \"more fiction\", \"again, fiction\", \"Fictional number 9\" ), check.names = FALSE)  #In this case the data.frame we want to run through is called test_df. #However the standard INFOODS names haven't been used, so the assumed nutrient #column names won't work, and they will have to be manually assigned. However, #the comment column is named the default name (comments) and so even if left #out will still be valid.  output_df <- CARTBEQ_standardised(df = test_df, item_ID = 'ID', CARTAmcg = 'CART A (mcg)', CARTBmcg = 'CART B (mcg)', CARTBEQmcg = 'CART B eq (mcg)', CARTBEQmcg_std = 'CART B eq (std) (mcg)',  CRYPXBmcg = 'CRYPXB (mcg)', VITAmcg = 'Vit A (mcg)',  VITA_RAEmcg = 'Vit A RAE (mcg)',  RETOLmcg = 'Retinol (mcg)') #> Item test_01 CARTBEQ_standardised calculated to be 159mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg value. #> Item test_02 CARTBEQ_standardised calculated to be 107mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_03 CARTBEQ_standardised calculated to be 102mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_04 CARTBEQ_standardised calculated to be 130mcg. CARTBEQ_standardised compiled from previous CARTBmcg value. #> Item test_05 CARTBEQ_standardised calculated to be 96mcg. CARTBEQ_standardised calculated from VITA_RAE and RETOL. #> Item test_06 CARTBEQ_standardised calculated to be 0mcg. CARTBEQ_standardised calculated from VITA and RETOL - recalculated_CARTBEQmcg_std calculated to be less than 0. Value reset to 0. #> Item test_07 CARTBEQ_standardised calculated to be 72mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value. #> Item test_08 CARTBEQ_standardised calculated to be 78mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg value. #> Item test_09 CARTBEQ_standardised calculated to be 112mcg. CARTBEQ_standardised compiled from previous CARTBmcg value. #> Item test_10 CARTBEQ_standardised calculated to be 143mcg. CARTBEQ_standardised compiled from previous CARTBEQmcg_std value.  #The resulting output will have a modified comments column, and a new column - #recalculated_CARTBEQmcg_std"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CHOAVLDFg_calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Carbohydrates (calculated by difference) Calculator — CHOAVLDFg_calculator","title":"Carbohydrates (calculated by difference) Calculator — CHOAVLDFg_calculator","text":"Calculates CHOAVLDFg_calculated = (100 - (WATERg + PROTg +   FATg_combined + FBGTg + ASHg + ALCg)). Column names case   sensitive error returned found.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CHOAVLDFg_calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Carbohydrates (calculated by difference) Calculator — CHOAVLDFg_calculator","text":"","code":"CHOAVLDFg_calculator(   df,   WATERg_column = \"WATERg\",   PROCNTg_column = \"PROCNTg\",   FAT_g_combined_column = \"FAT_g_combined\",   FIBTGg_combined_column = \"FIBTGg_combined\",   ALCg_column = \"ALCg\",   ASHg_column = \"ASHg\",   comment = TRUE,   comment_col = \"comments\",   NegativeValueReplacement = 0,   NegativeValueDF = FALSE )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/CHOAVLDFg_calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Carbohydrates (calculated by difference) Calculator — CHOAVLDFg_calculator","text":"df Required - data.frame data currently stored . WATERg_column Required - default: 'WATERg' - name column containing Water/moisture content grams per 100g Edible Portion (EP). PROCNTg_column Required - default: 'PROCNTg' - Protein grams per 100g Edible Portion (EP), reported original FCT assumed calculated nitrogen (NTg) content. FAT_g_combined_column Required - default: 'FAT_g_combined' - Fat content, unknown method calculation, grams per 100g Edible Portion (EP). FIBTGg_combined_column Required - default: 'FIBTGg_combined' - Fibre content combined Tagnames, preference Total dietary fibre AOAC Prosky method, expressed grams per 100g Edible Portion (EP). ALCg_column Required - default: 'ALCg' - Alcohol grams per 100g Edible Portion (EP). ASHg_column Required - default: 'ASHg' - Ashes grams per 100g Edible Portion (EP). comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing source CHOAVLDFg_calculated column added comment_col comment_col selected, comment = TRUE, one created. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment set FALSE. comment set TRUE, comment_col input name column found df, function create column name comment_col input store comments . NegativeValueReplacement Required - default: 0 - Options 0, NA, 'remove', 'nothing'. Choose happens negative values. set 0, negative values set 0. set NA, replaced NA. set 'remove', entries df removed. set 'nothing', left negative values. NegativeValueDF Required - default: FALSE - TRUE FALSE. set TRUE, output switches copy input df CHOAVLDFg_calculated column subset dataframe showing CHOAVLDFg_calculated values less 0, manual inspection.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CHOAVLDFg_calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Carbohydrates (calculated by difference) Calculator — CHOAVLDFg_calculator","text":"Original data.frame new CHOAVLDFg_calculated column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/CHOAVLDFg_calculator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Carbohydrates (calculated by difference) Calculator — CHOAVLDFg_calculator","text":"","code":"# Two example data.frames have been prepared to illustrate the # CHOAVLDFg_calculator The first is a dataset of fictional food values to # illustrate the various options in the function, and the second is a dataset # with non-standard column names, to show how to specify columns.  # This is the first data.frame - before the CHOAVLDFg_calculator has been used on it. breakfast_df <- breakfast_df[,c(\"food_code\", \"food_name\", \"WATERg\", \"PROCNTg\", \"FAT_g_combined\", \"FIBTGg_combined\", \"ALCg\", \"ASHg\", \"comments\")] breakfast_df #>    food_code      food_name WATERg PROCNTg FAT_g_combined FIBTGg_combined ALCg #> 1      F0001          Bacon     10      15             21              12   12 #> 2      F0002          Beans     15      10             12               3   43 #> 3      F0003          Toast     20      20             NA               8    8 #> 4      F0004       Mushroom     25      15             16              15   15 #> 5      F0005           Eggs     30      21             11               6    6 #> 6      F0006         Tomato     35      28             33               2    2 #> 7      F0007        Sausage     40      10             13               9    9 #> 8      F0008         Butter     NA      27             16              13   13 #> 9      F0009    Brown Sauce     NA      NA             NA              NA   NA #> 10     F0010 Tomato Ketchup     NA      NA             NA              NA   NA #>    ASHg                       comments #> 1    12                                #> 2     3 These are imaginary food items #> 3    28                           <NA> #> 4    15 With imaginary nutrient values #> 5     6                                #> 6     2                     And blanks #> 7     9                           <NA> #> 8    13      To test different outputs #> 9    NA                                #> 10   NA                  And scenarios # # # First, an example of the standard usecase - calculate the CHOAVLDFg_calculated # value, while resetting negative values to 0. NegativeToZeroResults <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = 0) #> --------------------------- #>  #> 4 CHOAVLDFg_calculated values calculated to be less than 0. Minimum result: -2. Number of values below -5: 0. Number of NA results: 2. Please rerun the function with NegativeValueDF = TRUE if you wish to inspect these values. #>  #> Negative values set to 0, as per user input. #>  #> --------------------------- # NegativeToZeroResults #>    food_code      food_name WATERg PROCNTg FAT_g_combined FIBTGg_combined ALCg #> 1      F0001          Bacon     10      15             21              12   12 #> 2      F0002          Beans     15      10             12               3   43 #> 3      F0003          Toast     20      20             NA               8    8 #> 4      F0004       Mushroom     25      15             16              15   15 #> 5      F0005           Eggs     30      21             11               6    6 #> 6      F0006         Tomato     35      28             33               2    2 #> 7      F0007        Sausage     40      10             13               9    9 #> 8      F0008         Butter     NA      27             16              13   13 #> 9      F0009    Brown Sauce     NA      NA             NA              NA   NA #> 10     F0010 Tomato Ketchup     NA      NA             NA              NA   NA #>    ASHg #> 1    12 #> 2     3 #> 3    28 #> 4    15 #> 5     6 #> 6     2 #> 7     9 #> 8    13 #> 9    NA #> 10   NA #>                                                                                                                     comments #> 1                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 2                                    These are imaginary food items; CHOAVLDFg_calculated calculated from 100-[constituents] #> 3                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 4  With imaginary nutrient values; CHOAVLDFg_calculated calculated from 100-[constituents] - Original value of -1 reset to 0 #> 5                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 6                      And blanks; CHOAVLDFg_calculated calculated from 100-[constituents] - Original value of -2 reset to 0 #> 7                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 8                                         To test different outputs; CHOAVLDFg_calculated calculated from 100-[constituents] #> 9                                                                                                                            #> 10                                                                                                             And scenarios #>    CHOAVLDFg_calculated #> 1                    18 #> 2                    14 #> 3                    16 #> 4                     0 #> 5                    20 #> 6                     0 #> 7                    10 #> 8                    18 #> 9                    NA #> 10                   NA # See the changes - the addition of the CHOAVLDFg_calculated column, and # the additions to the comments column. Notice how some comments are # specially formulated to show if the corresponding CHOAVLDFg_calculated # value has been reset to 0. # # # The second example shows the results when the Replacement option is set to NA NegativeToNA_results <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = NA) #> --------------------------- #>  #> 4 CHOAVLDFg_calculated values calculated to be less than 0. Minimum result: -2. Number of values below -5: 0. Number of NA results: 2. Please rerun the function with NegativeValueDF = TRUE if you wish to inspect these values. #>  #> Negative values set to NA, as per user input. #>  #> --------------------------- # NegativeToNA_results #>    food_code      food_name WATERg PROCNTg FAT_g_combined FIBTGg_combined ALCg #> 1      F0001          Bacon     10      15             21              12   12 #> 2      F0002          Beans     15      10             12               3   43 #> 3      F0003          Toast     20      20             NA               8    8 #> 4      F0004       Mushroom     25      15             16              15   15 #> 5      F0005           Eggs     30      21             11               6    6 #> 6      F0006         Tomato     35      28             33               2    2 #> 7      F0007        Sausage     40      10             13               9    9 #> 8      F0008         Butter     NA      27             16              13   13 #> 9      F0009    Brown Sauce     NA      NA             NA              NA   NA #> 10     F0010 Tomato Ketchup     NA      NA             NA              NA   NA #>    ASHg #> 1    12 #> 2     3 #> 3    28 #> 4    15 #> 5     6 #> 6     2 #> 7     9 #> 8    13 #> 9    NA #> 10   NA #>                                                                                                                      comments #> 1                                                                     CHOAVLDFg_calculated calculated from 100-[constituents] #> 2                                     These are imaginary food items; CHOAVLDFg_calculated calculated from 100-[constituents] #> 3                                                                     CHOAVLDFg_calculated calculated from 100-[constituents] #> 4  With imaginary nutrient values; CHOAVLDFg_calculated calculated from 100-[constituents] - Original value of -1 reset to NA #> 5                                                                     CHOAVLDFg_calculated calculated from 100-[constituents] #> 6                      And blanks; CHOAVLDFg_calculated calculated from 100-[constituents] - Original value of -2 reset to NA #> 7                                                                     CHOAVLDFg_calculated calculated from 100-[constituents] #> 8                                          To test different outputs; CHOAVLDFg_calculated calculated from 100-[constituents] #> 9                                                                                                                             #> 10                                                                                                              And scenarios #>    CHOAVLDFg_calculated #> 1                    18 #> 2                    14 #> 3                    16 #> 4                    NA #> 5                    20 #> 6                    NA #> 7                    10 #> 8                    18 #> 9                    NA #> 10                   NA # Check the CHOAVLDFg_calculated column and comments column again - see how # values below zero have been replaced with NA, and a note of this change # logged in the comments column. # # # The third example shows the results when the Replacement option is set to 'remove' remove_results <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = \"remove\") #> --------------------------- #>  #> 4 CHOAVLDFg_calculated values calculated to be less than 0. Minimum result: -2. Number of values below -5: 0. Number of NA results: 2. Please rerun the function with NegativeValueDF = TRUE if you wish to inspect these values. #>  #> Negative value rows removed, as per user input. #>  #> --------------------------- # remove_results #>   food_code food_name WATERg PROCNTg FAT_g_combined FIBTGg_combined ALCg ASHg #> 1     F0001     Bacon     10      15             21              12   12   12 #> 2     F0002     Beans     15      10             12               3   43    3 #> 3     F0003     Toast     20      20             NA               8    8   28 #> 5     F0005      Eggs     30      21             11               6    6    6 #> 7     F0007   Sausage     40      10             13               9    9    9 #> 8     F0008    Butter     NA      27             16              13   13   13 #>                                                                                  comments #> 1                                 CHOAVLDFg_calculated calculated from 100-[constituents] #> 2 These are imaginary food items; CHOAVLDFg_calculated calculated from 100-[constituents] #> 3                                 CHOAVLDFg_calculated calculated from 100-[constituents] #> 5                                 CHOAVLDFg_calculated calculated from 100-[constituents] #> 7                                 CHOAVLDFg_calculated calculated from 100-[constituents] #> 8      To test different outputs; CHOAVLDFg_calculated calculated from 100-[constituents] #>   CHOAVLDFg_calculated #> 1                   18 #> 2                   14 #> 3                   16 #> 5                   20 #> 7                   10 #> 8                   18 # See how the out of bounds values have been removed. # # # The fourth example is of the nothing results - i.e. nothing happens to the # negative values. NegativeNoChangeResults <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = \"nothing\") #> --------------------------- #>  #> 4 CHOAVLDFg_calculated values calculated to be less than 0. Minimum result: -2. Number of values below -5: 0. Number of NA results: 2. Please rerun the function with NegativeValueDF = TRUE if you wish to inspect these values. #>  #> Negative values left untouched, as per user input. #>  #> --------------------------- # NegativeNoChangeResults #>    food_code      food_name WATERg PROCNTg FAT_g_combined FIBTGg_combined ALCg #> 1      F0001          Bacon     10      15             21              12   12 #> 2      F0002          Beans     15      10             12               3   43 #> 3      F0003          Toast     20      20             NA               8    8 #> 4      F0004       Mushroom     25      15             16              15   15 #> 5      F0005           Eggs     30      21             11               6    6 #> 6      F0006         Tomato     35      28             33               2    2 #> 7      F0007        Sausage     40      10             13               9    9 #> 8      F0008         Butter     NA      27             16              13   13 #> 9      F0009    Brown Sauce     NA      NA             NA              NA   NA #> 10     F0010 Tomato Ketchup     NA      NA             NA              NA   NA #>    ASHg #> 1    12 #> 2     3 #> 3    28 #> 4    15 #> 5     6 #> 6     2 #> 7     9 #> 8    13 #> 9    NA #> 10   NA #>                                                                                   comments #> 1                                  CHOAVLDFg_calculated calculated from 100-[constituents] #> 2  These are imaginary food items; CHOAVLDFg_calculated calculated from 100-[constituents] #> 3                                  CHOAVLDFg_calculated calculated from 100-[constituents] #> 4  With imaginary nutrient values; CHOAVLDFg_calculated calculated from 100-[constituents] #> 5                                  CHOAVLDFg_calculated calculated from 100-[constituents] #> 6                      And blanks; CHOAVLDFg_calculated calculated from 100-[constituents] #> 7                                  CHOAVLDFg_calculated calculated from 100-[constituents] #> 8       To test different outputs; CHOAVLDFg_calculated calculated from 100-[constituents] #> 9                                  CHOAVLDFg_calculated calculated from 100-[constituents] #> 10                                                                           And scenarios #>    CHOAVLDFg_calculated #> 1                    18 #> 2                    14 #> 3                    16 #> 4                    -1 #> 5                    20 #> 6                    -2 #> 7                    10 #> 8                    18 #> 9                    NA #> 10                   NA # Look at the CHOAVLDFg_calculator values - and see how they've been left, # even if they're negative. # # # The fifth example is of the negative dataframe - an option useful for identifying # and examining negative results. NegativeCarb_results <- CHOAVLDFg_calculator(breakfast_df, NegativeValueDF = TRUE) #> --------------------------- #>  #> 4 CHOAVLDFg_calculated values calculated to be less than 0. Minimum result: -2. Number of values below -5: 0. Number of NA results: 2. Please rerun the function with NegativeValueDF = TRUE if you wish to inspect these values. #>  #> Negative values set to 0, as per user input. #>  #> --------------------------- # NegativeCarb_results #>      food_code food_name WATERg PROCNTg FAT_g_combined FIBTGg_combined ALCg #> 4        F0004  Mushroom     25      15             16              15   15 #> 6        F0006    Tomato     35      28             33               2    2 #> NA        <NA>      <NA>     NA      NA             NA              NA   NA #> NA.1      <NA>      <NA>     NA      NA             NA              NA   NA #>      ASHg                       comments CHOAVLDFg_calculated #> 4      15 With imaginary nutrient values                   -1 #> 6       2                     And blanks                   -2 #> NA     NA                           <NA>                   NA #> NA.1   NA                           <NA>                   NA # Only the out of bounds results are present, in their original form, for inspection. # # # The sixth example is of the CHOAVLDFg_calculator working on a dataframe with # non-standard column names. It uses a modified example data frame, shown below. # breakfast_df_nonstandard <- breakfast_df_nonstandard[,c(\"food_code\", \"food_name\", \"Water_values_g\", \"PROCNT_values_g\", \"FAT_values_g_combined\", \"FIBTG_values_g_combined\", \"ALC_values_g\", \"ASH_values_g\", \"comments_column\")] breakfast_df_nonstandard #>    food_code      food_name Water_values_g PROCNT_values_g #> 1      F0001          Bacon             10              15 #> 2      F0002          Beans             15              10 #> 3      F0003          Toast             20              20 #> 4      F0004       Mushroom             25              15 #> 5      F0005           Eggs             30              21 #> 6      F0006         Tomato             35              28 #> 7      F0007        Sausage             40              10 #> 8      F0008         Butter             NA              27 #> 9      F0009    Brown Sauce             NA              NA #> 10     F0010 Tomato Ketchup             NA              NA #>    FAT_values_g_combined FIBTG_values_g_combined ALC_values_g ASH_values_g #> 1                     21                      12           12           12 #> 2                     12                       3           43            3 #> 3                     NA                       8            8           28 #> 4                     16                      15           15           15 #> 5                     11                       6            6            6 #> 6                     33                       2            2            2 #> 7                     13                       9            9            9 #> 8                     16                      13           13           13 #> 9                     NA                      NA           NA           NA #> 10                    NA                      NA           NA           NA #>                   comments_column #> 1                                 #> 2  These are imaginary food items #> 3                            <NA> #> 4  With imaginary nutrient values #> 5                                 #> 6                      And blanks #> 7                            <NA> #> 8       To test different outputs #> 9                                 #> 10                  And scenarios # Notice how the column names are different, and differ from the assumed names. # # # Because of the different names, the column names for each input must be specified. nothing_results_NonStandardInput <- CHOAVLDFg_calculator( breakfast_df_nonstandard, WATERg_column = \"Water_values_g\", PROCNTg_column = \"PROCNT_values_g\", FAT_g_combined_column = \"FAT_values_g_combined\", FIBTGg_combined_column = \"FIBTG_values_g_combined\", ALCg_column = \"ALC_values_g\", ASHg_column = \"ASH_values_g\", comment_col = \"comments_column\" ) #> --------------------------- #>  #> 4 CHOAVLDFg_calculated values calculated to be less than 0. Minimum result: -2. Number of values below -5: 0. Number of NA results: 2. Please rerun the function with NegativeValueDF = TRUE if you wish to inspect these values. #>  #> Negative values set to 0, as per user input. #>  #> --------------------------- nothing_results_NonStandardInput #>    food_code      food_name Water_values_g PROCNT_values_g #> 1      F0001          Bacon             10              15 #> 2      F0002          Beans             15              10 #> 3      F0003          Toast             20              20 #> 4      F0004       Mushroom             25              15 #> 5      F0005           Eggs             30              21 #> 6      F0006         Tomato             35              28 #> 7      F0007        Sausage             40              10 #> 8      F0008         Butter             NA              27 #> 9      F0009    Brown Sauce             NA              NA #> 10     F0010 Tomato Ketchup             NA              NA #>    FAT_values_g_combined FIBTG_values_g_combined ALC_values_g ASH_values_g #> 1                     21                      12           12           12 #> 2                     12                       3           43            3 #> 3                     NA                       8            8           28 #> 4                     16                      15           15           15 #> 5                     11                       6            6            6 #> 6                     33                       2            2            2 #> 7                     13                       9            9            9 #> 8                     16                      13           13           13 #> 9                     NA                      NA           NA           NA #> 10                    NA                      NA           NA           NA #>                                                                                                              comments_column #> 1                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 2                                    These are imaginary food items; CHOAVLDFg_calculated calculated from 100-[constituents] #> 3                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 4  With imaginary nutrient values; CHOAVLDFg_calculated calculated from 100-[constituents] - Original value of -1 reset to 0 #> 5                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 6                      And blanks; CHOAVLDFg_calculated calculated from 100-[constituents] - Original value of -2 reset to 0 #> 7                                                                    CHOAVLDFg_calculated calculated from 100-[constituents] #> 8                                         To test different outputs; CHOAVLDFg_calculated calculated from 100-[constituents] #> 9                                                                                                                            #> 10                                                                                                             And scenarios #>    CHOAVLDFg_calculated #> 1                    18 #> 2                    14 #> 3                    16 #> 4                     0 #> 5                    20 #> 6                     0 #> 7                    10 #> 8                    18 #> 9                    NA #> 10                   NA # # The resulting CHOAVLDFg_calculated column is the same as in the first example, # despite the different names."},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":null,"dir":"Reference","previous_headings":"","what":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"function reads dataframe, well names 2-4   columns comprise decimal system within dataframe.   checks integrity series decimal identities row   rest decimal identities within row, picking   inconsistencies. inconsistencies reported, eith console messages   error report dataframe.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"","code":"Decimal_System_Checker(df, first, second, third, fourth)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"df Required - data frame containing decimal system. first Required - first column decimal system - basic item ID; e.g. 01 . second Required - second column decimal system - first subdivision base ID; e.g. 01.005 . third Optional - third column decimal system - second subdivision base ID first second ID; e.g. 01.005.03 . fourth Optional - fourth column decimal system - third subdivision base ID, second subdivision second ID, first subdivision third ID; e.g. 01.005.03.01 .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"R dataframe detailing errors found item   decimal system.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Decimal_System_Checker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A tool to test the integrity of a decimal system in a dataframe — Decimal_System_Checker","text":"","code":"#Two examples will be covered - one that results in the output error table, #another that produces the output messages only (not recommended for large #dataframes).  #First, we must create a test dataframe: test_df <- data.frame( c(\"Merlot\", \"pinot grigio\", \"Chateauneuf-du-Pape\", \"Tokaji\", \"Champagne\", \"Sauvignon Blanc\", \"Chardonnay\", \"Malbec\"), c(\"01\", \"01\", \"01\", \"01\", \"02\", \"02\", \"02\", \"02\"), c(\"02.01\", \"01.01\", \"01.02\", \"01.02\", \"02.01\", \"02.01\", \"02.02\", \"02.02\"), c(\"02.01.0111\", \"01.01.0131\", \"01.02.0001\", \"01.02.2031\", \"02.01.1001\", \"02.01.1001\", \"02.02.3443\", \"02.03.4341\"), c(\"02.01.0111.01\", \"01.01.0131.04\", \"01.02.0001.01\", \"01.02.2031.03\", \"02.01.1001.06\", \"02.01.1001.06\", \"02.01.3443.02\", \"02.02.4341.03\") )    #Then we should rename the columns of the dataframe:    colnames(test_df) <-     c(\"Wine names\",       \"ID1\",       \"ID2\",       \"ID3\",       \"ID4\"     )   #This first line runs the dataframe, and has an output variable listed. This  #means that as well as putting a message in the console when an error is  #found, all the error reports will be saved to a dataframe too.   output_test <- Decimal_System_Checker(test_df, first = \"ID1\", second =  \"ID2\", third = \"ID3\", fourth = \"ID4\") #> Tertiary decimal level used #>  #> Quaternary decimal level used #>  #> duplicate codes found in fourth level: 02.01.1001.06 #> [1] \"02.01.0111.01\" #> The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> [1] \"02.01.3443.02\" #> The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> [1] \"02.02.4341.03\" #> The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02.   #However, if we only want to get the readouts and not have an error  #dataframe to refer back to, then the code can be run like so:   Decimal_System_Checker(test_df, first = \"ID1\", second = \"ID2\", third =  \"ID3\", fourth = \"ID4\") #> Tertiary decimal level used #>  #> Quaternary decimal level used #>  #> duplicate codes found in fourth level: 02.01.1001.06 #> [1] \"02.01.0111.01\" #> The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. #> [1] \"02.01.0111.01\" #> The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> [1] \"02.01.3443.02\" #> The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> [1] \"02.02.4341.03\" #> The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02. #>   primary code secondary code tertiary code quaternary code #> 1           01          02.01    02.01.0111   02.01.0111.01 #> 5           02          02.01    02.01.1001   02.01.1001.06 #> 6           02          02.01    02.01.1001   02.01.1001.06 #> 7           02          02.02    02.02.3443   02.01.3443.02 #> 8           02          02.02    02.03.4341   02.02.4341.03 #>                                                                                                                                                                                                                                                                                                        error #> 1 The first part of the secondary code (02) does not match the primary code (01); 02.01 vs. 01. - The first part of the tertiary code (02) does not match the primary code (01); 02.01.0111 vs. 01. - The first part of the quaternary code (02) does not match the primary code (01); 02.01.0111.01 vs. 01. #> 5                                                                                                                                                                                                                                                       duplicate codes found in fourth level: 02.01.1001.06 #> 6                                                                                                                                                                                                                                                       duplicate codes found in fourth level: 02.01.1001.06 #> 7                                                                                                                                                                                               The second part of the quaternary code (01) does not match the secondary code (02); 02.01.3443.02 vs. 02.02. #> 8                                                                                                                                                                                                    The second part of the tertiary code (03) does not match the secondary code (02); 02.03.4341 vs. 02.02.   #This will do the same thing as the previous run, producing error printouts,  #but it will not create an error report dataframe."},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"function works basic calculator - values Total   Protein grams 'PROTg', Total Fat grams (ideally standardised)   'FATg_standardised', Available Carbohydrate grams   'CHOAVLDFg', Fibre, Total Dietary grams 'FIBTGg'   Alcohol grams 'ALCg' combined fins Energy kcal.   Alcohol optional, whereas inputs required - Alcohol   missing assumed 0.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"","code":"ENERCKcal_standardised(PROTg, FATg_standardised, CHOAVLDFg, FIBTGg, ALCg)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"PROTg Required - Total Protein value (grams) food item examined. FATg_standardised Required - Total Fat value (grams) food item examined. CHOAVLDFg Required - Total Available Carbohydrate value (grams) food item examined. FIBTGg Required - Total Dietary Fibre value (grams) food item examined. ALCg Optional - Total Alcohol value (grams) food item examined.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"calculated Energy value kcal.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKcal_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function used to calculate standardized Energy values in kcal — ENERCKcal_standardised","text":"","code":"#Three examples will be covered - two variants for a one-off #calculation, and to create a column with the calculated results.  #Single calculation:  #Bread, wheat, white, unfortified  Protein_value <- 7.5 Fat_value <- 1.3 Carb_value <- 50.5 Fibre_value <- 2.9 Alcohol_value <- 0  standardised_kcal <- ENERCKcal_standardised(PROT = Protein_value, FAT = Fat_value, CHOAVLDF = Carb_value, FIBTG = Fibre_value, ALC = Alcohol_value)  #alternatively:  standardised_kcal <- ENERCKcal_standardised(PROT = 7.5, FAT = 1.3, CHOAVLDF = 50.5, FIBTG = 2.9, ALC = 0)  #data.frame calculation:  #First, an example dataframe is outlined and created -  test_df_WAFCT2019 <- data.frame( c(\"Bread, wheat, white, unfortified\", \"Beer, European (4.6% v/v alcohol)\", \"Maize, yellow, meal, whole grains, unfortified\", \"Sweet potato, yellow flesh, raw\", \"Cassava, tuber, white flesh, raw\"), c(7.5, 0.3, 9.4, 1.5, 1.3), c(1.3, 0, 3.7, 0.2, 0.3), c(50.5, 3.7, 65.2, 25.5, 31.6), c(2.9, 0, 9.4, 3, 3.7), c(0, 3.6, 0, NA, 0))  #Then, the columns are renamed:  colnames(test_df_WAFCT2019) <- c(\"food_name\", \"protein\", \"fat\", \"carbs\", \"fb\", \"alcohol\")  #Once renamed, the function is applied. the assigned output is a new column #in the data.frame, and the inputs are the different columns detailing the #relevant food nutrient values.  test_df_WAFCT2019$ENERCKcal_stnd <- ENERCKcal_standardised(          test_df_WAFCT2019$protein,          test_df_WAFCT2019$fat,          test_df_WAFCT2019$carbs,          test_df_WAFCT2019$fb,          test_df_WAFCT2019$alcohol)  print(test_df_WAFCT2019) #>                                        food_name protein fat carbs  fb alcohol #> 1               Bread, wheat, white, unfortified     7.5 1.3  50.5 2.9     0.0 #> 2              Beer, European (4.6% v/v alcohol)     0.3 0.0   3.7 0.0     3.6 #> 3 Maize, yellow, meal, whole grains, unfortified     9.4 3.7  65.2 9.4     0.0 #> 4                Sweet potato, yellow flesh, raw     1.5 0.2  25.5 3.0      NA #> 5               Cassava, tuber, white flesh, raw     1.3 0.3  31.6 3.7     0.0 #>   ENERCKcal_stnd #> 1          249.5 #> 2           41.2 #> 3          350.5 #> 4          115.8 #> 5          141.7"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":null,"dir":"Reference","previous_headings":"","what":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"function works basic calculator - values Total   Protein grams 'PROTg', Total Fat grams (ideally standardised)   'FATg_standardised', Available Carbohydrate grams   'CHOAVLDFg', Fibre, Total Dietary grams 'FIBTGg'   Alcohol grams 'ALCg' combined fins Energy kj.   Alcohol optional, whereas inputs required - Alcohol   missing assumed 0.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"","code":"ENERCKj_standardised(PROTg, FATg_standardised, CHOAVLDFg, FIBTGg, ALCg)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"PROTg Required - Total Protein value (grams) food item examined. FATg_standardised Required - Total Fat value (grams) food item examined. CHOAVLDFg Required - Total Available Carbohydrate value (grams) food item examined. FIBTGg Required - Total Dietary Fibre value (grams) food item examined. ALCg Optional - Total Alcohol value (grams) food item examined.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"calculated Energy value kJ.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/ENERCKj_standardised.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function used to calculate standardized Energy values in kJ — ENERCKj_standardised","text":"","code":"#Three examples will be covered - two variants for a one-off #calculation, and to create a column with the calculated results.  #Single calculation:  #Bread, wheat, white, unfortified  Protein_value <- 7.5 Fat_value <- 1.3 Carb_value <- 50.5 Fibre_value <- 2.9 Alcohol_value <- 0  standardised_kJ <- ENERCKj_standardised(PROT = Protein_value, FAT = Fat_value, CHOAVLDF = Carb_value, FIBTG = Fibre_value, ALC = Alcohol_value)  #alternatively:  standardised_kJ <- ENERCKj_standardised(PROT = 7.5, FAT = 1.3, CHOAVLDF = 50.5, FIBTG = 2.9, ALC = 0)  #data.frame calculation:  #First, an example dataframe is outlined and created -  test_df_WAFCT2019 <- data.frame( c(\"Bread, wheat, white, unfortified\", \"Beer, European (4.6% v/v alcohol)\", \"Maize, yellow, meal, whole grains, unfortified\", \"Sweet potato, yellow flesh, raw\", \"Cassava, tuber, white flesh, raw\"), c(7.5, 0.3, 9.4, 1.5, 1.3), c(1.3, 0, 3.7, 0.2, 0.3), c(50.5, 3.7, 65.2, 25.5, 31.6), c(2.9, 0, 9.4, 3, 3.7), c(0, 3.6, 0, NA, 0))  #Then, the columns are renamed:  colnames(test_df_WAFCT2019) <- c(\"food_name\", \"protein\", \"fat\", \"carbs\", \"fb\", \"alcohol\")  #Once renamed, the function is applied. the assigned output is a new column #in the data.frame, and the inputs are the different columns detailing the #relevant food nutrient values.  test_df_WAFCT2019$ENERCKj_stnd <- ENERCKj_standardised(          test_df_WAFCT2019$protein,          test_df_WAFCT2019$fat,          test_df_WAFCT2019$carbs,          test_df_WAFCT2019$fb,          test_df_WAFCT2019$alcohol)  print(test_df_WAFCT2019) #>                                        food_name protein fat carbs  fb alcohol #> 1               Bread, wheat, white, unfortified     7.5 1.3  50.5 2.9     0.0 #> 2              Beer, European (4.6% v/v alcohol)     0.3 0.0   3.7 0.0     3.6 #> 3 Maize, yellow, meal, whole grains, unfortified     9.4 3.7  65.2 9.4     0.0 #> 4                Sweet potato, yellow flesh, raw     1.5 0.2  25.5 3.0      NA #> 5               Cassava, tuber, white flesh, raw     1.3 0.3  31.6 3.7     0.0 #>   ENERCKj_stnd #> 1       1057.3 #> 2        172.4 #> 3       1480.3 #> 4        490.4 #> 5        600.0"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":null,"dir":"Reference","previous_headings":"","what":"A GUI interface to match rows in two dataframes to each other via a fuzzy string search — Fuzzy_Matcher","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy string search — Fuzzy_Matcher","text":"function reads two dataframes, comprised ID row name row. name rows matched based fuzzy search suggestions human confirmation using GUI interface.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy string search — Fuzzy_Matcher","text":"","code":"Fuzzy_Matcher(df1, df2, focus_term)"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy string search — Fuzzy_Matcher","text":"df1 Required - primary dataframe, items need matches. dataframe must two columns size; first column must ID column, second must item names. df2 Required - secondary dataframe, list potential items match contents df1 . dataframe must two columns size; first column must ID column, second must item names. focus_term Optional - Specify string. string contained item name, fuzzy matcher opens wider potential list matches item.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy string search — Fuzzy_Matcher","text":"R object csv contains items df1 counterparts df2 row.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Fuzzy_Matcher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A GUI interface to match rows in two dataframes to each other via a fuzzy string search — Fuzzy_Matcher","text":"GUI nature Fuzzy Matcher, R-based   description example able help guide using function   might standard R function. quick guide   created encourage examine, can found   https://tomcodd.github.io/NutritionTools/articles/Fuzzy-Matcher-Guide.html","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert summary rows between groups of rows in a data frame — Group_Summariser","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"function analyses data frame, sorting based groups detailed group_ID_col, inserts summary/mean rows group. work data frame must structured group ID column sort, group item listed. data columns need averaged need numeric also. secondary option sorting items within groups, using secondary_sort_col parameter.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"","code":"Group_Summariser(   df,   group_ID_col,   secondary_sort_col,   input_weighting_column,   weighting_leniency = 0,   blank_cols = c(),   sep_row = F,   seq_col = F,   weighting_col = F,   round_weighting = T )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"df Required - data.frame summary rows need inserted . group_ID_col Required - column name specifying groups summary rows created . secondary_sort_col Optional - Specify column results sorted sorted groups. input_weighting_column Optional - Specify column contains set weightings. selected, weightings used summariser instead set average. partial weightings given item, remaining matches weightings split evenly . weighting_leniency Optional - default: 0 - Introduces forgiveness 'group weightings must equal 1' rule. cases using existing weightings can lead total weighting value equal 1 (particularly weightings rounded way using Group Summariser). inputted value sets range around 1 tool accept - e.g. input value 0.03 mean weighting total can 0.97 1.03. blank_cols Optional -  Specify lits column names wish leave blank average rows (e.g. metadata). Recommended run function , see results, check columns want list . sep_row Optional - default: 'F' - set TRUE, Summariser insert empty row summary row, help reading separation. column names listed must exactly match columns want excluded, character string; e.g. c(\"FCT Food Item Code\", \"FCT Food Name\") columns FCT Food Item Code FCT Food Name. seq_col Optional - default: 'F' - set TRUE, Summariser insert sequence column, numbering item goes summary row. weighting_col Optional - default: 'F' - set TRUE, Summariser insert weighting factor item goes summary row. round_weighting Optional - default: 'T' - set TRUE, Summariser round weighted value 2 decimal places.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/Group_Summariser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert summary rows between groups of rows in a data frame — Group_Summariser","text":"data.frame mirrors df, group summary row inserted, containing mean data columns.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/NIAmg_calc_combiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Niacin Calculator and Combiner — NIAmg_calc_combiner","title":"Niacin Calculator and Combiner — NIAmg_calc_combiner","text":"function calculates potential values Niacin,   combines appropriate ones item new value. Inputs must   cover least two following combinations: NIAmg_column,   NIAEQmg_column + NIATRPmg_column, NIAEQmg_column + TRPmg_column.   function can find Niacin values multiple ways,   select appropriate. priority use 1st:  Niacin, 2nd: Total   Niacin Equivalents - (Tryptophan/60), 3rd: Total Niacin   Equivalents - Niacin Equivalents Tryptophan.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/NIAmg_calc_combiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Niacin Calculator and Combiner — NIAmg_calc_combiner","text":"","code":"NIAmg_calc_combiner(   df,   NIAmg_column = \"NIAmg\",   TRPmg_column = \"TRPmg\",   NIAEQmg_column = \"NIAEQmg\",   NIATRPmg_column = \"NIATRPmg\",   comment = TRUE,   comment_col = \"comments\" )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/NIAmg_calc_combiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Niacin Calculator and Combiner — NIAmg_calc_combiner","text":"df Required - data.frame data currently stored . NIAmg_column Optional - default: 'NIAmg' - name column containing Niacin (preformed) mg per 100g Edible Portion (EP). unavailable, set input NA. TRPmg_column Optional - default: 'TRPmg' - Tryptophan, mg per 100g Edible Portion (EP). unavailable, set input NA. NIAEQmg_column Required - default: 'NIAEQmg' - name column containing Niacin equivalents, total (preformed Niacin well Niacin equivalents Tryptophan) mg per 100g Edible Portion (EP). required input impossible get 2 ways calculating NIAmg_combined without , required function work. NIATRPmg_column Optional - default: 'NIATRPmg' - name column containing Niacin equivalents Tryptophan, mg per 100g Edible Portion (EP). unavailable, set input NA. comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing calculation used find NIAmg_combined value added comment_col. comment_col selected, comment = TRUE, one created. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment set FALSE. comment set TRUE, comment_col input name column found df, function create column name comment_col input store comments .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/NIAmg_calc_combiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Niacin Calculator and Combiner — NIAmg_calc_combiner","text":"Original data.frame new NIAmg_combined column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/NIAmg_calc_combiner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Niacin Calculator and Combiner — NIAmg_calc_combiner","text":"","code":"# We will go through three examples of the NIAmg_calc_combiner, two using # standard names, and another with non-standard names. breakfast_df <- breakfast_df[,c(\"food_code\", \"food_name\", \"NIAmg\", \"TRPmg\", \"NIAEQmg\", \"NIATRPmg\", \"comments\")] breakfast_df #>    food_code      food_name NIAmg TRPmg NIAEQmg NIATRPmg #> 1      F0001          Bacon 172.0 126.0    85.3    263.6 #> 2      F0002          Beans    NA 142.5    49.2       NA #> 3      F0003          Toast  24.4 142.7    86.4    266.3 #> 4      F0004       Mushroom    NA 167.0    23.2    240.0 #> 5      F0005           Eggs   8.1    NA    30.5     71.5 #> 6      F0006         Tomato 134.6  76.3    83.3    243.0 #> 7      F0007        Sausage  10.2  98.6    16.6    163.4 #> 8      F0008         Butter 187.9  41.4    84.5    278.4 #> 9      F0009    Brown Sauce  92.0 172.0    17.7    272.2 #> 10     F0010 Tomato Ketchup    NA    NA      NA       NA #>                          comments #> 1                                 #> 2  These are imaginary food items #> 3                            <NA> #> 4  With imaginary nutrient values #> 5                                 #> 6                      And blanks #> 7                            <NA> #> 8       To test different outputs #> 9                                 #> 10                  And scenarios  # This is the first data.frame; you can see it has the food item information, # the required columns for calculation, and a comments column. Everything # needed to run the NIAmg_calc_combiner  NIA_results <- NIAmg_calc_combiner(breakfast_df) #> --------------------------- #>  #> Breakdown of values used: #>  #> NIAmg_combined equal to NIAEQmg - (TRPmg/60)  #>                                            2  #>                NIAmg_combined equal to NIAmg  #>                                            7  #>   No suitable value for NIAmg_combined found  #>                                            1  #>  #> ---------------------------  NIA_results #>    food_code      food_name NIAmg TRPmg NIAEQmg NIATRPmg #> 1      F0001          Bacon 172.0 126.0    85.3    263.6 #> 2      F0002          Beans    NA 142.5    49.2       NA #> 3      F0003          Toast  24.4 142.7    86.4    266.3 #> 4      F0004       Mushroom    NA 167.0    23.2    240.0 #> 5      F0005           Eggs   8.1    NA    30.5     71.5 #> 6      F0006         Tomato 134.6  76.3    83.3    243.0 #> 7      F0007        Sausage  10.2  98.6    16.6    163.4 #> 8      F0008         Butter 187.9  41.4    84.5    278.4 #> 9      F0009    Brown Sauce  92.0 172.0    17.7    272.2 #> 10     F0010 Tomato Ketchup    NA    NA      NA       NA #>                                                                        comments #> 1                                                 NIAmg_combined equal to NIAmg #> 2  These are imaginary food items; NIAmg_combined equal to NIAEQmg - (TRPmg/60) #> 3                                                 NIAmg_combined equal to NIAmg #> 4  With imaginary nutrient values; NIAmg_combined equal to NIAEQmg - (TRPmg/60) #> 5                                                 NIAmg_combined equal to NIAmg #> 6                                     And blanks; NIAmg_combined equal to NIAmg #> 7                                                 NIAmg_combined equal to NIAmg #> 8                      To test different outputs; NIAmg_combined equal to NIAmg #> 9                                                 NIAmg_combined equal to NIAmg #> 10                    And scenarios; No suitable value for NIAmg_combined found #>    NIAmg_combined #> 1       172.00000 #> 2        46.82500 #> 3        24.40000 #> 4        20.41667 #> 5         8.10000 #> 6       134.60000 #> 7        10.20000 #> 8       187.90000 #> 9        92.00000 #> 10             NA  # You can see how the data.frame has been returned with a new column (NIAmg_combined) # and an additional comment in the comments column, detailing the calculation used.  # However, what if you don't have data for all of these nutrients? In that case, # The nutrient in question should be set to NA. The function assumes you have # all nutrients it needs available, and assumes the standard INFOODS TAGNAMEunit # naming system. This is why the above example works without the need to specify # which column is which. However, when it a column is missing, this means that # the default input needs to be overridden by an NA value, to tell the function that # its missing.  breakfast_df$TRPmg <- NULL  breakfast_df #>    food_code      food_name NIAmg NIAEQmg NIATRPmg #> 1      F0001          Bacon 172.0    85.3    263.6 #> 2      F0002          Beans    NA    49.2       NA #> 3      F0003          Toast  24.4    86.4    266.3 #> 4      F0004       Mushroom    NA    23.2    240.0 #> 5      F0005           Eggs   8.1    30.5     71.5 #> 6      F0006         Tomato 134.6    83.3    243.0 #> 7      F0007        Sausage  10.2    16.6    163.4 #> 8      F0008         Butter 187.9    84.5    278.4 #> 9      F0009    Brown Sauce  92.0    17.7    272.2 #> 10     F0010 Tomato Ketchup    NA      NA       NA #>                          comments #> 1                                 #> 2  These are imaginary food items #> 3                            <NA> #> 4  With imaginary nutrient values #> 5                                 #> 6                      And blanks #> 7                            <NA> #> 8       To test different outputs #> 9                                 #> 10                  And scenarios  # We can see the breakfast_df is now missing an input column; NIATRPmg. To run # this function without this input, the command would be:  NIA_results_noTRP <- NIAmg_calc_combiner(breakfast_df, TRPmg_column = NA) #> --------------------------- #>  #> Breakdown of values used: #>  #> NIAmg_combined equal to NIAEQmg - NIATRPmg  #>                                          1  #>              NIAmg_combined equal to NIAmg  #>                                          7  #> No suitable value for NIAmg_combined found  #>                                          2  #>  #> --------------------------- NIA_results_noTRP #>    food_code      food_name NIAmg NIAEQmg NIATRPmg #> 1      F0001          Bacon 172.0    85.3    263.6 #> 2      F0002          Beans    NA    49.2       NA #> 3      F0003          Toast  24.4    86.4    266.3 #> 4      F0004       Mushroom    NA    23.2    240.0 #> 5      F0005           Eggs   8.1    30.5     71.5 #> 6      F0006         Tomato 134.6    83.3    243.0 #> 7      F0007        Sausage  10.2    16.6    163.4 #> 8      F0008         Butter 187.9    84.5    278.4 #> 9      F0009    Brown Sauce  92.0    17.7    272.2 #> 10     F0010 Tomato Ketchup    NA      NA       NA #>                                                                      comments #> 1                                               NIAmg_combined equal to NIAmg #> 2  These are imaginary food items; No suitable value for NIAmg_combined found #> 3                                               NIAmg_combined equal to NIAmg #> 4  With imaginary nutrient values; NIAmg_combined equal to NIAEQmg - NIATRPmg #> 5                                               NIAmg_combined equal to NIAmg #> 6                                   And blanks; NIAmg_combined equal to NIAmg #> 7                                               NIAmg_combined equal to NIAmg #> 8                    To test different outputs; NIAmg_combined equal to NIAmg #> 9                                               NIAmg_combined equal to NIAmg #> 10                  And scenarios; No suitable value for NIAmg_combined found #>    NIAmg_combined #> 1           172.0 #> 2              NA #> 3            24.4 #> 4          -216.8 #> 5             8.1 #> 6           134.6 #> 7            10.2 #> 8           187.9 #> 9            92.0 #> 10             NA  # You can see the results have shifted. The values that had been calculated using # TRP are now calculated using NIATRP. (Please don't worry about the discrepancy # between the previous results and these; these nutritional figures are entirely # fictional, and so the new calculation may shift NIAmg_combined massively. This # is not an issue.)  # If too few inputs for calculation are inputted, then the function will show a # warning, and not run.   # The third example uses non-standard names, to show how to set the input parameters # if the data.frame is not using the suggested TAGNAMEunit naming system.  breakfast_df_nonstandard <- breakfast_df_nonstandard[,c(\"food_code\", \"food_name\", \"Niacin_milligrams\", \"Tryptophan_milligrams\", \"Niacin_eq_milligrams\", \"Niacine_from_TRP_mg\", \"comments_column\")]  breakfast_df_nonstandard #>    food_code      food_name Niacin_milligrams Tryptophan_milligrams #> 1      F0001          Bacon             172.0                 126.0 #> 2      F0002          Beans                NA                 142.5 #> 3      F0003          Toast              24.4                 142.7 #> 4      F0004       Mushroom                NA                 167.0 #> 5      F0005           Eggs               8.1                    NA #> 6      F0006         Tomato             134.6                  76.3 #> 7      F0007        Sausage              10.2                  98.6 #> 8      F0008         Butter             187.9                  41.4 #> 9      F0009    Brown Sauce              92.0                 172.0 #> 10     F0010 Tomato Ketchup                NA                    NA #>    Niacin_eq_milligrams Niacine_from_TRP_mg                comments_column #> 1                  85.3               263.6                                #> 2                  49.2                  NA These are imaginary food items #> 3                  86.4               266.3                           <NA> #> 4                  23.2               240.0 With imaginary nutrient values #> 5                  30.5                71.5                                #> 6                  83.3               243.0                     And blanks #> 7                  16.6               163.4                           <NA> #> 8                  84.5               278.4      To test different outputs #> 9                  17.7               272.2                                #> 10                   NA                  NA                  And scenarios # You can see this is the same dataset as used previously, but with differing # column names. This will mean the function will not know what the required # column names are, and will need the user to name them.  NIA_results_nonstandard <- NIAmg_calc_combiner(breakfast_df_nonstandard, NIAmg_column = \"Niacin_milligrams\", TRPmg_column = \"Tryptophan_milligrams\", NIAEQmg_column = \"Niacin_eq_milligrams\", NIATRPmg_column = \"Niacine_from_TRP_mg\", comment_col = \"comments_column\") #> --------------------------- #>  #> Breakdown of values used: #>  #> NIAmg_combined equal to Niacin_eq_milligrams - (Tryptophan_milligrams/60)  #>                                                                         2  #>                                 NIAmg_combined equal to Niacin_milligrams  #>                                                                         7  #>                                No suitable value for NIAmg_combined found  #>                                                                         1  #>  #> ---------------------------  NIA_results_nonstandard #>    food_code      food_name Niacin_milligrams Tryptophan_milligrams #> 1      F0001          Bacon             172.0                 126.0 #> 2      F0002          Beans                NA                 142.5 #> 3      F0003          Toast              24.4                 142.7 #> 4      F0004       Mushroom                NA                 167.0 #> 5      F0005           Eggs               8.1                    NA #> 6      F0006         Tomato             134.6                  76.3 #> 7      F0007        Sausage              10.2                  98.6 #> 8      F0008         Butter             187.9                  41.4 #> 9      F0009    Brown Sauce              92.0                 172.0 #> 10     F0010 Tomato Ketchup                NA                    NA #>    Niacin_eq_milligrams Niacine_from_TRP_mg #> 1                  85.3               263.6 #> 2                  49.2                  NA #> 3                  86.4               266.3 #> 4                  23.2               240.0 #> 5                  30.5                71.5 #> 6                  83.3               243.0 #> 7                  16.6               163.4 #> 8                  84.5               278.4 #> 9                  17.7               272.2 #> 10                   NA                  NA #>                                                                                              comments_column #> 1                                                                  NIAmg_combined equal to Niacin_milligrams #> 2  These are imaginary food items; NIAmg_combined equal to Niacin_eq_milligrams - (Tryptophan_milligrams/60) #> 3                                                                  NIAmg_combined equal to Niacin_milligrams #> 4  With imaginary nutrient values; NIAmg_combined equal to Niacin_eq_milligrams - (Tryptophan_milligrams/60) #> 5                                                                  NIAmg_combined equal to Niacin_milligrams #> 6                                                      And blanks; NIAmg_combined equal to Niacin_milligrams #> 7                                                                  NIAmg_combined equal to Niacin_milligrams #> 8                                       To test different outputs; NIAmg_combined equal to Niacin_milligrams #> 9                                                                  NIAmg_combined equal to Niacin_milligrams #> 10                                                 And scenarios; No suitable value for NIAmg_combined found #>    NIAmg_combined #> 1       172.00000 #> 2        46.82500 #> 3        24.40000 #> 4        20.41667 #> 5         8.10000 #> 6       134.60000 #> 7        10.20000 #> 8       187.90000 #> 9        92.00000 #> 10             NA  # You can see how the results are the same as calculated above, regardless of # the changed column names."},{"path":"https://tomcodd.github.io/NutritionTools/reference/SOPg_calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum of Proximate Calculator — SOPg_calculator","title":"Sum of Proximate Calculator — SOPg_calculator","text":"Calculates SOPg_calculated = (WATERg + PROCNTg +   FAT_g_combined + CHOAVLg + FIBTGg_combined   + ALCg +ASHg). Column names case sensitive error returned   found.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/SOPg_calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum of Proximate Calculator — SOPg_calculator","text":"","code":"SOPg_calculator(   df,   WATERg_column = \"WATERg\",   PROCNTg_column = \"PROCNTg\",   FAT_g_combined_column = \"FAT_g_combined\",   CHOAVLg_column = \"CHOAVLg\",   FIBTGg_combined_column = \"FIBTGg_combined\",   ALCg_column = \"ALCg\",   ASHg_column = \"ASHg\",   comment = TRUE,   comment_col = \"comments\",   OutsideBoundsReplacement = \"none\",   LowerBound = 93,   UpperBound = 107,   OutsideBoundsDF = FALSE )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/SOPg_calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum of Proximate Calculator — SOPg_calculator","text":"df Required - data.frame data currently stored . WATERg_column Required - default: 'WATERg' - name column containing Water/moisture content grams per 100g Edible Portion (EP). PROCNTg_column Required - default: 'PROCNTg' - Protein grams per 100g Edible Portion (EP), reported original FCT assumed calculated nitrogen (NTg) content. FAT_g_combined_column Required - default: 'FAT_g_combined' - Fat content, unknown method calculation, grams per 100g Edible Portion (EP). CHOAVLg_column Required - default: 'CHOAVLg' - Available carbohydrates calculated difference, grams per 100g Edible Portion (EP). FIBTGg_combined_column Required - default: 'FIBTGg_combined' - Fibre content combined Tagnames, preference Total dietary fibre AOAC Prosky method, expressed grams per 100g Edible Portion (EP). ALCg_column Required - default: 'ALCg' - Alcohol grams per 100g Edible Portion (EP). ASHg_column Required - default: 'ASHg' - Ashes grams per 100g Edible Portion (EP). comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing source SOPg_calculated column added comment_col. comment_col selected, comment = TRUE, one created, called comments. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment parameter set FALSE. OutsideBoundsReplacement Required - default: 'none' - Options 'round', NA, 'remove', 'none'. Choose happens values outside bounds. ranges set FAO standards: 93-107 considered acceptable. parameter decides happens values less 93, 107. set round, outside bound values set closest acceptable value (e.g. 90 -> 93, 111 -> 107. set NA, replaced NA. set 'remove', rows removed (including NA results). set 'none', left bound values. LowerBound Required - default: 93 - Integer value. Sets lower boundary acceptable SOPg_calculated values, therefore determines values affected OutsideBoundsReplacement OutsideBoundsDF. FAO standards list 93 lower boundary acceptable values, 95 lower boundary preferred values. UpperBound Required - default: 107 - Integer value. Sets upper boundary acceptable SOPg_calculated values, therefore determines values affected OutsideBoundsReplacement OutsideBoundsDF. FAO standards list 107 upper boundary acceptable values, 105 upper boundary preferred values. OutsideBoundsDF Required - default: FALSE - TRUE FALSE. set TRUE, output switches copy input df SOPg_calculated column subset dataframe showing SOPg_calculated values bounds, manual inspection.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/SOPg_calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum of Proximate Calculator — SOPg_calculator","text":"Original data.frame new SOPg_calculated column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/SOPg_calculator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum of Proximate Calculator — SOPg_calculator","text":"","code":"# Two example data.frames have been prepared to illustrate the # SOPg_calculator. The first is a dataset of fictional food values to # illustrate the various options in the function, and the second is a dataset # with non-standard column names, to show how to specify columns.  # This is the first data.frame - before the SOPg_calculator has been used on it. breakfast_df <- breakfast_df[,c(\"food_code\", \"food_name\", \"WATERg\", \"PROCNTg\", \"FAT_g_combined\", \"CHOAVLg\", \"FIBTGg_combined\", \"ALCg\", \"ASHg\", \"comments\")] breakfast_df #>    food_code      food_name WATERg PROCNTg FAT_g_combined CHOAVLg #> 1      F0001          Bacon     10      15             21      10 #> 2      F0002          Beans     15      10             12       1 #> 3      F0003          Toast     20      20             NA      24 #> 4      F0004       Mushroom     25      15             16      46 #> 5      F0005           Eggs     30      21             11      20 #> 6      F0006         Tomato     35      28             33       2 #> 7      F0007        Sausage     40      10             13      24 #> 8      F0008         Butter     NA      27             16      22 #> 9      F0009    Brown Sauce     NA      NA             NA      NA #> 10     F0010 Tomato Ketchup     NA      NA             NA      NA #>    FIBTGg_combined ALCg ASHg                       comments #> 1               12   12   12                                #> 2                3   43    3 These are imaginary food items #> 3                8    8   28                           <NA> #> 4               15   15   15 With imaginary nutrient values #> 5                6    6    6                                #> 6                2    2    2                     And blanks #> 7                9    9    9                           <NA> #> 8               13   13   13      To test different outputs #> 9               NA   NA   NA                                #> 10              NA   NA   NA                  And scenarios # # # First, an example of the standard usecase - calculate the SOPg_calculated # value, without modifying out of bounds values. nothing_results <- SOPg_calculator(breakfast_df, OutsideBoundsReplacement = \"none\") #> --------------------------- #>  #> 7 SOPg_calculated values calculated to be Out of Bounds (less than 93 or higher than 107). Largest distance from 100: 47. Number of NA's: 2. Please rerun the function with OutsideBoundsDF = TRUE if you wish to inspect these values. #>  #> Out of Bounds values left untouched, as per user input. #>  #> --------------------------- # nothing_results #>    food_code      food_name WATERg PROCNTg FAT_g_combined CHOAVLg #> 1      F0001          Bacon     10      15             21      10 #> 2      F0002          Beans     15      10             12       1 #> 3      F0003          Toast     20      20             NA      24 #> 4      F0004       Mushroom     25      15             16      46 #> 5      F0005           Eggs     30      21             11      20 #> 6      F0006         Tomato     35      28             33       2 #> 7      F0007        Sausage     40      10             13      24 #> 8      F0008         Butter     NA      27             16      22 #> 9      F0009    Brown Sauce     NA      NA             NA      NA #> 10     F0010 Tomato Ketchup     NA      NA             NA      NA #>    FIBTGg_combined ALCg ASHg #> 1               12   12   12 #> 2                3   43    3 #> 3                8    8   28 #> 4               15   15   15 #> 5                6    6    6 #> 6                2    2    2 #> 7                9    9    9 #> 8               13   13   13 #> 9               NA   NA   NA #> 10              NA   NA   NA #>                                                                               comments #> 1                                  SOPg_calculated calculated from adding constituents #> 2  These are imaginary food items; SOPg_calculated calculated from adding constituents #> 3                                  SOPg_calculated calculated from adding constituents #> 4  With imaginary nutrient values; SOPg_calculated calculated from adding constituents #> 5                                  SOPg_calculated calculated from adding constituents #> 6                      And blanks; SOPg_calculated calculated from adding constituents #> 7                                  SOPg_calculated calculated from adding constituents #> 8       To test different outputs; SOPg_calculated calculated from adding constituents #> 9                                  SOPg_calculated calculated from adding constituents #> 10                  And scenarios; SOPg_calculated calculated from adding constituents #>    SOPg_calculated #> 1               92 #> 2               87 #> 3              108 #> 4              147 #> 5              100 #> 6              104 #> 7              114 #> 8              104 #> 9               NA #> 10              NA # See the changes - the addition of the SOPg_calculated column, and the # additions to the comments column. # # # The second example shows the results when the Replacement option is set to NA NA_results <- SOPg_calculator(breakfast_df, OutsideBoundsReplacement = NA) #> --------------------------- #>  #> 7 SOPg_calculated values calculated to be Out of Bounds (less than 93 or higher than 107). Largest distance from 100: 47. Number of NA's: 2. Please rerun the function with OutsideBoundsDF = TRUE if you wish to inspect these values. #>  #> Out of Bounds values set to NA, as per user input. #>  #> --------------------------- # NA_results #>    food_code      food_name WATERg PROCNTg FAT_g_combined CHOAVLg #> 1      F0001          Bacon     10      15             21      10 #> 2      F0002          Beans     15      10             12       1 #> 3      F0003          Toast     20      20             NA      24 #> 4      F0004       Mushroom     25      15             16      46 #> 5      F0005           Eggs     30      21             11      20 #> 6      F0006         Tomato     35      28             33       2 #> 7      F0007        Sausage     40      10             13      24 #> 8      F0008         Butter     NA      27             16      22 #> 9      F0009    Brown Sauce     NA      NA             NA      NA #> 10     F0010 Tomato Ketchup     NA      NA             NA      NA #>    FIBTGg_combined ALCg ASHg #> 1               12   12   12 #> 2                3   43    3 #> 3                8    8   28 #> 4               15   15   15 #> 5                6    6    6 #> 6                2    2    2 #> 7                9    9    9 #> 8               13   13   13 #> 9               NA   NA   NA #> 10              NA   NA   NA #>                                                                                                                   comments #> 1                                   SOPg_calculated calculated from adding constituents - Original value of 92 reset to NA #> 2   These are imaginary food items; SOPg_calculated calculated from adding constituents - Original value of 87 reset to NA #> 3                                  SOPg_calculated calculated from adding constituents - Original value of 108 reset to NA #> 4  With imaginary nutrient values; SOPg_calculated calculated from adding constituents - Original value of 147 reset to NA #> 5                                                                      SOPg_calculated calculated from adding constituents #> 6                                                          And blanks; SOPg_calculated calculated from adding constituents #> 7                                  SOPg_calculated calculated from adding constituents - Original value of 114 reset to NA #> 8                                           To test different outputs; SOPg_calculated calculated from adding constituents #> 9                                                                                                                          #> 10                                                                                                           And scenarios #>    SOPg_calculated #> 1               NA #> 2               NA #> 3               NA #> 4               NA #> 5              100 #> 6              104 #> 7               NA #> 8              104 #> 9               NA #> 10              NA # Check the SOP column and comments column again - see how values outside of # bounds have been replaced with NA, and a note of this change logged in the # comments column. # # # The third example shows the results when the Replacement option is set to 'remove' remove_results <- SOPg_calculator(breakfast_df, OutsideBoundsReplacement = \"remove\") #> --------------------------- #>  #> 7 SOPg_calculated values calculated to be Out of Bounds (less than 93 or higher than 107). Largest distance from 100: 47. Number of NA's: 2. Please rerun the function with OutsideBoundsDF = TRUE if you wish to inspect these values. #>  #> Out of Bounds value rows removed, as per user input. #>  #> --------------------------- # remove_results #>   food_code food_name WATERg PROCNTg FAT_g_combined CHOAVLg FIBTGg_combined #> 5     F0005      Eggs     30      21             11      20               6 #> 6     F0006    Tomato     35      28             33       2               2 #> 8     F0008    Butter     NA      27             16      22              13 #>   ALCg ASHg #> 5    6    6 #> 6    2    2 #> 8   13   13 #>                                                                         comments #> 5                            SOPg_calculated calculated from adding constituents #> 6                And blanks; SOPg_calculated calculated from adding constituents #> 8 To test different outputs; SOPg_calculated calculated from adding constituents #>   SOPg_calculated #> 5             100 #> 6             104 #> 8             104 # See how the out of bounds values have been removed. # # # The fourth example is of the rounding results. rounding_results <- SOPg_calculator(breakfast_df, OutsideBoundsReplacement = \"round\") #> --------------------------- #>  #> 7 SOPg_calculated values calculated to be Out of Bounds (less than 93 or higher than 107). Largest distance from 100: 47. Number of NA's: 2. Please rerun the function with OutsideBoundsDF = TRUE if you wish to inspect these values. #>  #> Out of Bounds values set to closest acceptable value, as per user input. #>  #> --------------------------- # rounding_results #>    food_code      food_name WATERg PROCNTg FAT_g_combined CHOAVLg #> 1      F0001          Bacon     10      15             21      10 #> 2      F0002          Beans     15      10             12       1 #> 3      F0003          Toast     20      20             NA      24 #> 4      F0004       Mushroom     25      15             16      46 #> 5      F0005           Eggs     30      21             11      20 #> 6      F0006         Tomato     35      28             33       2 #> 7      F0007        Sausage     40      10             13      24 #> 8      F0008         Butter     NA      27             16      22 #> 9      F0009    Brown Sauce     NA      NA             NA      NA #> 10     F0010 Tomato Ketchup     NA      NA             NA      NA #>    FIBTGg_combined ALCg ASHg #> 1               12   12   12 #> 2                3   43    3 #> 3                8    8   28 #> 4               15   15   15 #> 5                6    6    6 #> 6                2    2    2 #> 7                9    9    9 #> 8               13   13   13 #> 9               NA   NA   NA #> 10              NA   NA   NA #>                                                                                                                    comments #> 1                                    SOPg_calculated calculated from adding constituents - Original value of 92 reset to 93 #> 2    These are imaginary food items; SOPg_calculated calculated from adding constituents - Original value of 87 reset to 93 #> 3                                  SOPg_calculated calculated from adding constituents - Original value of 108 reset to 107 #> 4  With imaginary nutrient values; SOPg_calculated calculated from adding constituents - Original value of 147 reset to 107 #> 5                                                                       SOPg_calculated calculated from adding constituents #> 6                                                           And blanks; SOPg_calculated calculated from adding constituents #> 7                                  SOPg_calculated calculated from adding constituents - Original value of 114 reset to 107 #> 8                                            To test different outputs; SOPg_calculated calculated from adding constituents #> 9                                                                       SOPg_calculated calculated from adding constituents #> 10                                                                                                            And scenarios #>    SOPg_calculated #> 1               93 #> 2               93 #> 3              107 #> 4              107 #> 5              100 #> 6              104 #> 7              107 #> 8              104 #> 9               NA #> 10              NA # Look at the SOP_combined values - and see how they've been capped to the bounds # if they would have been out fo bounds, with a note of the change in the comments. # # # The fifth example is of the out of bounds dataframe - an option useful for identifying # and examining out of bounds results. OoB_DF_results <- SOPg_calculator(breakfast_df, OutsideBoundsDF = TRUE) # OoB_DF_results #>    food_code      food_name WATERg PROCNTg FAT_g_combined CHOAVLg #> 1      F0001          Bacon     10      15             21      10 #> 2      F0002          Beans     15      10             12       1 #> 3      F0003          Toast     20      20             NA      24 #> 4      F0004       Mushroom     25      15             16      46 #> 7      F0007        Sausage     40      10             13      24 #> 9      F0009    Brown Sauce     NA      NA             NA      NA #> 10     F0010 Tomato Ketchup     NA      NA             NA      NA #>    FIBTGg_combined ALCg ASHg                       comments SOPg_calculated #> 1               12   12   12                                             92 #> 2                3   43    3 These are imaginary food items              87 #> 3                8    8   28                           <NA>             108 #> 4               15   15   15 With imaginary nutrient values             147 #> 7                9    9    9                           <NA>             114 #> 9               NA   NA   NA                                             NA #> 10              NA   NA   NA                  And scenarios              NA # Only the out of bounds results are present, in their original form, for inspection. # # # The sixth example is of the SOPg_calculator working on a dataframe with non-standard # column names. It uses a modified example data frame, shown below. breakfast_df_nonstandard <- breakfast_df_nonstandard[,c(\"food_code\", \"food_name\", \"Water_values_g\", \"FAT_values_g_combined\", \"CHOAVL_values_g\", \"PROCNT_values_g\", \"FIBTG_values_g_combined\", \"ALC_values_g\", \"ASH_values_g\", \"comments_column\")] breakfast_df_nonstandard #>    food_code      food_name Water_values_g FAT_values_g_combined #> 1      F0001          Bacon             10                    21 #> 2      F0002          Beans             15                    12 #> 3      F0003          Toast             20                    NA #> 4      F0004       Mushroom             25                    16 #> 5      F0005           Eggs             30                    11 #> 6      F0006         Tomato             35                    33 #> 7      F0007        Sausage             40                    13 #> 8      F0008         Butter             NA                    16 #> 9      F0009    Brown Sauce             NA                    NA #> 10     F0010 Tomato Ketchup             NA                    NA #>    CHOAVL_values_g PROCNT_values_g FIBTG_values_g_combined ALC_values_g #> 1               10              15                      12           12 #> 2                1              10                       3           43 #> 3               24              20                       8            8 #> 4               46              15                      15           15 #> 5               20              21                       6            6 #> 6                2              28                       2            2 #> 7               24              10                       9            9 #> 8               22              27                      13           13 #> 9               NA              NA                      NA           NA #> 10              NA              NA                      NA           NA #>    ASH_values_g                comments_column #> 1            12                                #> 2             3 These are imaginary food items #> 3            28                           <NA> #> 4            15 With imaginary nutrient values #> 5             6                                #> 6             2                     And blanks #> 7             9                           <NA> #> 8            13      To test different outputs #> 9            NA                                #> 10           NA                  And scenarios # Notice how the column names are different, and differ from the assumed names. # # # Because of the different names, the column names for each input must be specified. nothing_results_NonStandardInput <- SOPg_calculator( breakfast_df_nonstandard, WATERg_column = \"Water_values_g\", PROCNTg_column = \"PROCNT_values_g\", FAT_g_combined_column = \"FAT_values_g_combined\", CHOAVLg_column = \"CHOAVL_values_g\", FIBTGg_combined_column = \"FIBTG_values_g_combined\", ALCg_column = \"ALC_values_g\", ASHg_column = \"ASH_values_g\", comment_col = \"comments_column\", LowerBound = 97, UpperBound = 103, OutsideBoundsReplacement = \"nothing\") #> --------------------------- #>  #> 9 SOPg_calculated values calculated to be Out of Bounds (less than 97 or higher than 103). Largest distance from 100: 47. Number of NA's: 2. Please rerun the function with OutsideBoundsDF = TRUE if you wish to inspect these values. #>  #> Out of Bounds values left untouched, as per user input. #>  #> --------------------------- # nothing_results_NonStandardInput #>    food_code      food_name Water_values_g FAT_values_g_combined #> 1      F0001          Bacon             10                    21 #> 2      F0002          Beans             15                    12 #> 3      F0003          Toast             20                    NA #> 4      F0004       Mushroom             25                    16 #> 5      F0005           Eggs             30                    11 #> 6      F0006         Tomato             35                    33 #> 7      F0007        Sausage             40                    13 #> 8      F0008         Butter             NA                    16 #> 9      F0009    Brown Sauce             NA                    NA #> 10     F0010 Tomato Ketchup             NA                    NA #>    CHOAVL_values_g PROCNT_values_g FIBTG_values_g_combined ALC_values_g #> 1               10              15                      12           12 #> 2                1              10                       3           43 #> 3               24              20                       8            8 #> 4               46              15                      15           15 #> 5               20              21                       6            6 #> 6                2              28                       2            2 #> 7               24              10                       9            9 #> 8               22              27                      13           13 #> 9               NA              NA                      NA           NA #> 10              NA              NA                      NA           NA #>    ASH_values_g #> 1            12 #> 2             3 #> 3            28 #> 4            15 #> 5             6 #> 6             2 #> 7             9 #> 8            13 #> 9            NA #> 10           NA #>                                                                        comments_column #> 1                                  SOPg_calculated calculated from adding constituents #> 2  These are imaginary food items; SOPg_calculated calculated from adding constituents #> 3                                  SOPg_calculated calculated from adding constituents #> 4  With imaginary nutrient values; SOPg_calculated calculated from adding constituents #> 5                                  SOPg_calculated calculated from adding constituents #> 6                      And blanks; SOPg_calculated calculated from adding constituents #> 7                                  SOPg_calculated calculated from adding constituents #> 8       To test different outputs; SOPg_calculated calculated from adding constituents #> 9                                  SOPg_calculated calculated from adding constituents #> 10                  And scenarios; SOPg_calculated calculated from adding constituents #>    SOPg_calculated #> 1               92 #> 2               87 #> 3              108 #> 4              147 #> 5              100 #> 6              104 #> 7              114 #> 8              104 #> 9               NA #> 10              NA # The resulting SOPg_calculated column is the same as in the first example, despite the # different names - although, due to the shift in the bounds, the warning message is not."},{"path":"https://tomcodd.github.io/NutritionTools/reference/THIAmg_combiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Thiamine Nutrient Combiner — THIAmg_combiner","title":"Thiamine Nutrient Combiner — THIAmg_combiner","text":"Combines possible values Thiamine heirachically   suitable one used. Considers Thiamine Thiamine   Hydrochloride.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/THIAmg_combiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thiamine Nutrient Combiner — THIAmg_combiner","text":"","code":"THIAmg_combiner(   df,   THIAmg_column = \"THIAmg\",   THIAHCLmg_column = \"THIAHCLmg\",   comment = TRUE,   comment_col = \"comments\" )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/THIAmg_combiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thiamine Nutrient Combiner — THIAmg_combiner","text":"df Required - data.frame data currently stored . THIAmg_column Required - default: 'THIAmg' - name column containing Thiamine, vitamin B1 analysed expressed Thiamine mg per 100g EP. THIAHCLmg_column Required - default: 'THIAHCLmg' - name column containing THIAHCLmg hydrochloride, vitamin B1 analysed expressed Thiamine hydrochloride mg per 100g EP. comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing source THIAmg_combined column added comment_col. comment_col selected, comment = TRUE, one created. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment parameter set FALSE. set true, comment_col entry found df, create column name entry.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/THIAmg_combiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thiamine Nutrient Combiner — THIAmg_combiner","text":"Original data.frame new THIAmg_combined column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/THIAmg_combiner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thiamine Nutrient Combiner — THIAmg_combiner","text":"","code":"#' # Two example data.frames have been created to give an example of # using the THIAmg_combiner; one with the expected inputs, another with custom # inputs.  breakfast_df <- breakfast_df[, c(\"food_code\", \"food_name\", \"THIAmg\", \"THIAHCLmg\", \"comments\")] breakfast_df #>    food_code      food_name THIAmg THIAHCLmg                       comments #> 1      F0001          Bacon     32        21                                #> 2      F0002          Beans     90        45 These are imaginary food items #> 3      F0003          Toast    130        20                           <NA> #> 4      F0004       Mushroom     21        69 With imaginary nutrient values #> 5      F0005           Eggs   <NA>        42                                #> 6      F0006         Tomato     61       150                     And blanks #> 7      F0007        Sausage     21        23                           <NA> #> 8      F0008         Butter               30      To test different outputs #> 9      F0009    Brown Sauce     59        52                                #> 10     F0010 Tomato Ketchup   <NA>        NA                  And scenarios  # We start with a data.frame containing patchy values between THIAmg and THIAHCLmg. Ideally # we would like to combine these into a single 'combined' column with as few gaps # as possible. This is the purpose of the THIAmg_combiner.  THIA_results <- THIAmg_combiner(breakfast_df) #> --------------------------- #>  #> Breakdown of values used: #>  #> No suitable value for THIAmg_combined found  #>                                           1  #>          THIAmg_combined equal to THIAHCLmg  #>                                           2  #>             THIAmg_combined equal to THIAmg  #>                                           7  #>  #> --------------------------- THIA_results #>    food_code      food_name THIAmg THIAHCLmg #> 1      F0001          Bacon     32        21 #> 2      F0002          Beans     90        45 #> 3      F0003          Toast    130        20 #> 4      F0004       Mushroom     21        69 #> 5      F0005           Eggs   <NA>        42 #> 6      F0006         Tomato     61       150 #> 7      F0007        Sausage     21        23 #> 8      F0008         Butter               30 #> 9      F0009    Brown Sauce     59        52 #> 10     F0010 Tomato Ketchup   <NA>        NA #>                                                           comments #> 1                                  THIAmg_combined equal to THIAmg #> 2  These are imaginary food items; THIAmg_combined equal to THIAmg #> 3                                  THIAmg_combined equal to THIAmg #> 4  With imaginary nutrient values; THIAmg_combined equal to THIAmg #> 5                               THIAmg_combined equal to THIAHCLmg #> 6                      And blanks; THIAmg_combined equal to THIAmg #> 7                                  THIAmg_combined equal to THIAmg #> 8    To test different outputs; THIAmg_combined equal to THIAHCLmg #> 9                                  THIAmg_combined equal to THIAmg #> 10      And scenarios; No suitable value for THIAmg_combined found #>    THIAmg_combined #> 1               32 #> 2               90 #> 3              130 #> 4               21 #> 5               42 #> 6               61 #> 7               21 #> 8               30 #> 9               59 #> 10            <NA>  # Note how there is now a new THIAmg_combined column, with values filled in # from the THIAmg and THIAHCLmg columns, depending on which is most appropriate. # A comment has also been added to the comments column detailing this change.  # This works without any input beyond the data.frame containing the nutrition # information because the function is expecting standard column names, comprised # of the nutrient INFOODS Tagname and the unit. However, if the columns are not # named this way, then the user must specify which column relates to which input. # An example of this is shown below. breakfast_df_nonstandard <- breakfast_df_nonstandard[, c(\"food_code\", \"food_name\",  \"Thiamine_milligrams\", \"Thiamine_from_HCL_milligrams\", \"comments_column\")] breakfast_df_nonstandard #>    food_code      food_name Thiamine_milligrams Thiamine_from_HCL_milligrams #> 1      F0001          Bacon                  32                           21 #> 2      F0002          Beans                  90                           45 #> 3      F0003          Toast                 130                           20 #> 4      F0004       Mushroom                  21                           69 #> 5      F0005           Eggs                <NA>                           42 #> 6      F0006         Tomato                  61                          150 #> 7      F0007        Sausage                  21                           23 #> 8      F0008         Butter                                               30 #> 9      F0009    Brown Sauce                  59                           52 #> 10     F0010 Tomato Ketchup                <NA>                           NA #>                   comments_column #> 1                                 #> 2  These are imaginary food items #> 3                            <NA> #> 4  With imaginary nutrient values #> 5                                 #> 6                      And blanks #> 7                            <NA> #> 8       To test different outputs #> 9                                 #> 10                  And scenarios  # You can see how the column names are different. The values remain the same # however.  # To use these non-standard names, you must specify each input - as shown below.  THIA_results_nonstandard <- THIAmg_combiner(breakfast_df, THIAmg_column = \"Thiamine_milligrams\", THIAHCLmg_column = \"Thiamine_from_HCL_milligrams\", comment_col = \"comments_column\") #> Error in THIAmg_combiner(breakfast_df, THIAmg_column = \"Thiamine_milligrams\",     THIAHCLmg_column = \"Thiamine_from_HCL_milligrams\", comment_col = \"comments_column\"): The THIAmg_column is not a column name in df - please input a string that is a column name in df, e.g. 'Thiamine_mg'  THIA_results_nonstandard #> Error in eval(expr, envir, enclos): object 'THIA_results_nonstandard' not found  # You can see from the results that the calculation is run in exactly the same # way, with the changed column names."},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITA_RAEmcg_calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Vitamin A (Retinol Activity Equivalent) Calculator — VITA_RAEmcg_calculator","title":"Vitamin A (Retinol Activity Equivalent) Calculator — VITA_RAEmcg_calculator","text":"Calculates VITA_RAEmcg_calculated = (RETOLmcg + (CARTBEQmcg_std/12)). Column names case sensitive error returned found.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITA_RAEmcg_calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vitamin A (Retinol Activity Equivalent) Calculator — VITA_RAEmcg_calculator","text":"","code":"VITA_RAEmcg_calculator(   df,   RETOLmcg_column = \"RETOLmcg\",   CARTBEQmcg_std_column = \"CARTBEQmcg_std\",   comment = TRUE,   comment_col = \"comments\" )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITA_RAEmcg_calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vitamin A (Retinol Activity Equivalent) Calculator — VITA_RAEmcg_calculator","text":"df Required - data.frame data currently stored . RETOLmcg_column Required - default: 'RETOLmcg' - name column containing Retinol mcg per 100g Edible Portion (EP). CARTBEQmcg_std_column Required - default: 'CARTBEQmcg_std' - Beta-carotene equivalents, mcg per 100g Edible Portion (EP). comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing calculation used find VITA_mcg_calculated value added comment_col. comment_col selected, comment = TRUE, one created. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment set FALSE. comment set TRUE, comment_col input name column found df, function create column name comment_col input store comments .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITA_RAEmcg_calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vitamin A (Retinol Activity Equivalent) Calculator — VITA_RAEmcg_calculator","text":"Original data.frame new VITA_RAEmcg_calculated column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITA_RAEmcg_calculator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vitamin A (Retinol Activity Equivalent) Calculator — VITA_RAEmcg_calculator","text":"","code":"# We will go through two examples of the VITA_RAEmcg_calculator, one using standard # names, and another with non-standard names. breakfast_df <- breakfast_df[,c(\"food_code\", \"food_name\", \"RETOLmcg\", \"CARTBEQmcg_combined\", \"comments\")] breakfast_df #>    food_code      food_name RETOLmcg CARTBEQmcg_combined #> 1      F0001          Bacon       53                  NA #> 2      F0002          Beans       12                  51 #> 3      F0003          Toast       20                  91 #> 4      F0004       Mushroom       NA                  22 #> 5      F0005           Eggs       62                  62 #> 6      F0006         Tomato       40                 102 #> 7      F0007        Sausage      140                  32 #> 8      F0008         Butter      210                  72 #> 9      F0009    Brown Sauce       41                 112 #> 10     F0010 Tomato Ketchup       NA                  NA #>                          comments #> 1                                 #> 2  These are imaginary food items #> 3                            <NA> #> 4  With imaginary nutrient values #> 5                                 #> 6                      And blanks #> 7                            <NA> #> 8       To test different outputs #> 9                                 #> 10                  And scenarios  # This is the first data.frame; you can see it has the food item information, # the required columns for calculation, and a comments column. Everything # needed to run the VITA_RAEmcg_calculator.  VitA_results <- VITA_RAEmcg_calculator(breakfast_df) #> Error in VITA_RAEmcg_calculator(breakfast_df): The CARTBEQmcg_std_column is not a column name in df - please input a string that is a column name in df, e.g. 'column two'.  VitA_results #> Error in eval(expr, envir, enclos): object 'VitA_results' not found  # You can see how the data.frame has been returned with a new column (VITAmcg_calculated) # and an additional comment in the comments column, detailing the calculation used.  # The second example uses non-standard names, to show how to set the input parameters # if the data.frame is not using the suggested TAGNAMEunit naming system.  breakfast_df_nonstandard <- breakfast_df_nonstandard[,c(\"food_code\", \"food_name\", \"Retinol_micrograms\", \"Beta_Carotene_Equivalents_micrograms\", \"comments_column\")]  breakfast_df_nonstandard #>    food_code      food_name Retinol_micrograms #> 1      F0001          Bacon                 53 #> 2      F0002          Beans                 12 #> 3      F0003          Toast                 20 #> 4      F0004       Mushroom                 NA #> 5      F0005           Eggs                 62 #> 6      F0006         Tomato                 40 #> 7      F0007        Sausage                140 #> 8      F0008         Butter                210 #> 9      F0009    Brown Sauce                 41 #> 10     F0010 Tomato Ketchup                 NA #>    Beta_Carotene_Equivalents_micrograms                comments_column #> 1                                    NA                                #> 2                                    51 These are imaginary food items #> 3                                    91                           <NA> #> 4                                    22 With imaginary nutrient values #> 5                                    62                                #> 6                                   102                     And blanks #> 7                                    32                           <NA> #> 8                                    72      To test different outputs #> 9                                   112                                #> 10                                   NA                  And scenarios # You can see this is the same dataset as used previously, but with differing # column names. This will mean the function will not know what the required # column names are, and will need the user to name them.  VitA_results_nonstandard <- VITA_RAEmcg_calculator(breakfast_df_nonstandard, RETOLmcg_column = \"Retinol_micrograms\", CARTBEQmcg_combined_column = \"Beta_Carotene_Equivalents_micrograms\", comment_col = \"comments_column\") #> Error in VITA_RAEmcg_calculator(breakfast_df_nonstandard, RETOLmcg_column = \"Retinol_micrograms\",     CARTBEQmcg_combined_column = \"Beta_Carotene_Equivalents_micrograms\",     comment_col = \"comments_column\"): unused argument (CARTBEQmcg_combined_column = \"Beta_Carotene_Equivalents_micrograms\")  VitA_results_nonstandard #> Error in eval(expr, envir, enclos): object 'VitA_results_nonstandard' not found  # You can see how the results are the same as calculated above, regardless of # the changed column names."},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITAmcg_calculator.html","id":null,"dir":"Reference","previous_headings":"","what":"Vitamin A Calculator — VITAmcg_calculator","title":"Vitamin A Calculator — VITAmcg_calculator","text":"Calculates VITAmcg_calculated = (RETOLmcg + (CARTBEQmcg_combined/6)). Column names case sensitive error returned found.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITAmcg_calculator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vitamin A Calculator — VITAmcg_calculator","text":"","code":"VITAmcg_calculator(   df,   RETOLmcg_column = \"RETOLmcg\",   CARTBEQmcg_combined_column = \"CARTBEQmcg_combined\",   comment = TRUE,   comment_col = \"comments\" )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITAmcg_calculator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vitamin A Calculator — VITAmcg_calculator","text":"df Required - data.frame data currently stored . RETOLmcg_column Required - default: 'RETOLmcg' - name column containing Retinol mcg per 100g Edible Portion (EP). CARTBEQmcg_combined_column Required - default: 'CARTBEQmcg_combined' - Beta-carotene equivalents, mcg per 100g Edible Portion (EP). comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing calculation used find VITA_mcg_calculated value added comment_col. comment_col selected, comment = TRUE, one created. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment set FALSE. comment set TRUE, comment_col input name column found df, function create column name comment_col input store comments .","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITAmcg_calculator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vitamin A Calculator — VITAmcg_calculator","text":"Original data.frame new VITAmcg_calculated column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/VITAmcg_calculator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vitamin A Calculator — VITAmcg_calculator","text":"","code":"# We will go through two examples of the VITAmcg_calculator, one using standard # names, and another with non-standard names. breakfast_df <- breakfast_df[,c(\"food_code\", \"food_name\", \"RETOLmcg\", \"CARTBEQmcg_combined\", \"comments\")] breakfast_df #>    food_code      food_name RETOLmcg CARTBEQmcg_combined #> 1      F0001          Bacon       53                  NA #> 2      F0002          Beans       12                  51 #> 3      F0003          Toast       20                  91 #> 4      F0004       Mushroom       NA                  22 #> 5      F0005           Eggs       62                  62 #> 6      F0006         Tomato       40                 102 #> 7      F0007        Sausage      140                  32 #> 8      F0008         Butter      210                  72 #> 9      F0009    Brown Sauce       41                 112 #> 10     F0010 Tomato Ketchup       NA                  NA #>                          comments #> 1                                 #> 2  These are imaginary food items #> 3                            <NA> #> 4  With imaginary nutrient values #> 5                                 #> 6                      And blanks #> 7                            <NA> #> 8       To test different outputs #> 9                                 #> 10                  And scenarios  # This is the first data.frame; you can see it has the food item information, # the required columns for calculation, and a comments column. Everything # needed to run the VITAmcg_calculator.  VitA_results <- VITAmcg_calculator(breakfast_df)  VitA_results #>    food_code      food_name RETOLmcg CARTBEQmcg_combined #> 1      F0001          Bacon       53                  NA #> 2      F0002          Beans       12                  51 #> 3      F0003          Toast       20                  91 #> 4      F0004       Mushroom       NA                  22 #> 5      F0005           Eggs       62                  62 #> 6      F0006         Tomato       40                 102 #> 7      F0007        Sausage      140                  32 #> 8      F0008         Butter      210                  72 #> 9      F0009    Brown Sauce       41                 112 #> 10     F0010 Tomato Ketchup       NA                  NA #>                                                                                                            comments #> 1                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 2  These are imaginary food items; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 3                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 4  With imaginary nutrient values; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 5                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 6                      And blanks; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 7                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 8       To test different outputs; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 9                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 10                  And scenarios; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #>    VITAmcg_calculated #> 1           53.000000 #> 2           20.500000 #> 3           35.166667 #> 4            3.666667 #> 5           72.333333 #> 6           57.000000 #> 7          145.333333 #> 8          222.000000 #> 9           59.666667 #> 10                 NA  # You can see how the data.frame has been returned with a new column (VITAmcg_calculated) # and an additional comment in the comments column, detailing the calculation used.  # The second example uses non-standard names, to show how to set the input parameters # if the data.frame is not using the suggested TAGNAMEunit naming system.  breakfast_df_nonstandard <- breakfast_df_nonstandard[,c(\"food_code\", \"food_name\", \"Retinol_micrograms\", \"Beta_Carotene_Equivalents_micrograms\", \"comments_column\")]  breakfast_df_nonstandard #>    food_code      food_name Retinol_micrograms #> 1      F0001          Bacon                 53 #> 2      F0002          Beans                 12 #> 3      F0003          Toast                 20 #> 4      F0004       Mushroom                 NA #> 5      F0005           Eggs                 62 #> 6      F0006         Tomato                 40 #> 7      F0007        Sausage                140 #> 8      F0008         Butter                210 #> 9      F0009    Brown Sauce                 41 #> 10     F0010 Tomato Ketchup                 NA #>    Beta_Carotene_Equivalents_micrograms                comments_column #> 1                                    NA                                #> 2                                    51 These are imaginary food items #> 3                                    91                           <NA> #> 4                                    22 With imaginary nutrient values #> 5                                    62                                #> 6                                   102                     And blanks #> 7                                    32                           <NA> #> 8                                    72      To test different outputs #> 9                                   112                                #> 10                                   NA                  And scenarios # You can see this is the same dataset as used previously, but with differing # column names. This will mean the function will not know what the required # column names are, and will need the user to name them.  VitA_results_nonstandard <- VITAmcg_calculator(breakfast_df_nonstandard, RETOLmcg_column = \"Retinol_micrograms\", CARTBEQmcg_combined_column = \"Beta_Carotene_Equivalents_micrograms\", comment_col = \"comments_column\")  VitA_results_nonstandard #>    food_code      food_name Retinol_micrograms #> 1      F0001          Bacon                 53 #> 2      F0002          Beans                 12 #> 3      F0003          Toast                 20 #> 4      F0004       Mushroom                 NA #> 5      F0005           Eggs                 62 #> 6      F0006         Tomato                 40 #> 7      F0007        Sausage                140 #> 8      F0008         Butter                210 #> 9      F0009    Brown Sauce                 41 #> 10     F0010 Tomato Ketchup                 NA #>    Beta_Carotene_Equivalents_micrograms #> 1                                    NA #> 2                                    51 #> 3                                    91 #> 4                                    22 #> 5                                    62 #> 6                                   102 #> 7                                    32 #> 8                                    72 #> 9                                   112 #> 10                                   NA #>                                                                                                     comments_column #> 1                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 2  These are imaginary food items; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 3                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 4  With imaginary nutrient values; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 5                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 6                      And blanks; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 7                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 8       To test different outputs; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 9                                  VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #> 10                  And scenarios; VITAmcg_calculated value calculated from Retinol + 1/6 Beta-Carotene Equivalents #>    VITAmcg_calculated #> 1           53.000000 #> 2           20.500000 #> 3           35.166667 #> 4            3.666667 #> 5           72.333333 #> 6           57.000000 #> 7          145.333333 #> 8          222.000000 #> 9           59.666667 #> 10                 NA  # You can see how the results are the same as calculated above, regardless of # the changed column names."},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Imaginary Food Items — breakfast_df","title":"Imaginary Food Items — breakfast_df","text":"imaginary dataset Food Items used demonstrate various functions","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imaginary Food Items — breakfast_df","text":"","code":"breakfast_df"},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Imaginary Food Items — breakfast_df","text":"data frame 10 rows 21 columns: food_code Imaginary Food ID food_name Food names attach imaginary nutritional data WATERg Imaginary Water values PROCNTg Imaginary Protein values FAT_g_combined Imaginary Fat values CHOAVLg Imaginary Carbohyrate values FIBTGg_combined Imaginary Fibre values ALCg Imaginary Alcohol values ASHg Imaginary Ash values THIAmg Imaginary Thiamine values THIAHCLmg Imaginary Thiamine HCL values RETOLmcg Imaginary retinol values CARTBEQmcg_combined Imaginary Beta-Carotene equiv. values NIAmg Imaginary Niacin values TRPmg Imaginary Tryptophan values NIAEQmg Imaginary Niacin equivalent values NIATRPmg Imaginary Niacin Tryptophan values FATg Imaginary Fat values FAT_g Imaginary Fat unknown source values FATCEg Imaginary Fat CE method values comments Imaginary comments","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Imaginary Food Items — breakfast_df","text":"imaginary dataset; formal source.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df_nonstandard.html","id":null,"dir":"Reference","previous_headings":"","what":"Imaginary Food Items — breakfast_df_nonstandard","title":"Imaginary Food Items — breakfast_df_nonstandard","text":"imaginary dataset Food Items non-standard column names used demonstrate various functions","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df_nonstandard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imaginary Food Items — breakfast_df_nonstandard","text":"","code":"breakfast_df_nonstandard"},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df_nonstandard.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Imaginary Food Items — breakfast_df_nonstandard","text":"data frame 10 rows 21 columns: food_code Imaginary Food ID food_name Food names attach imaginary nutritional data Water_values_g Imaginary Water values PROCNT_values_g Imaginary Protein values FAT_values_g_combined Imaginary Fat values CHOAVL_values_g Imaginary Carbohyrate values FIBTG_values_g_combined Imaginary Fibre values ALC_values_g Imaginary Alcohol values ASH_values_g Imaginary Ash values Thiamine_milligrams Imaginary Thiamine values Thiamine_from_HCL_milligrams Imaginary Thiamine HCL values Retinol_micrograms Imaginary retinol values Beta_Carotene_Equivalents_micrograms Imaginary Beta-Carotene equiv. values Niacin_milligrams Imaginary Niacin values Tryptophan_milligrams Imaginary Tryptophan values Niacin_eq_milligrams Imaginary Niacin equivalent values Niacine_from_TRP_mg Imaginary Niacin Tryptophan values FAT_in_g Imaginary Fat values FAT_unknown_calc_g Imaginary Fat unknown source values FAT_continuous_extraction_g Imaginary Fat CE method values comments_column Imaginary comments","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/breakfast_df_nonstandard.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Imaginary Food Items — breakfast_df_nonstandard","text":"imaginary dataset; formal source.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/nutri_combiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-column Nutrient Combiner — nutri_combiner","title":"Multi-column Nutrient Combiner — nutri_combiner","text":"Combines nutrients variables spread   multiple columns single new column new_var, depending   user-set hierarchy. hierarchy set var1_column   main variable, priority. values var1_column   available (.e. var1_column blanks, NA values),   values var2_column used instead. still   blanks, values var3_column used,   var4_column, var5_column finally   var6_column. Please note - use var3_column -   var6_column optional, however var1_column   var2_column must present. Comments can also used record   origin values.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/nutri_combiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-column Nutrient Combiner — nutri_combiner","text":"","code":"nutri_combiner(   df,   var1_column,   var2_column,   var3_column,   var4_column,   var5_column,   var6_column,   new_var,   comment = TRUE,   comment_col = \"comments\" )"},{"path":"https://tomcodd.github.io/NutritionTools/reference/nutri_combiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-column Nutrient Combiner — nutri_combiner","text":"df Required - data.frame data currently stored . var1_column Required - column name primary variable pull values . variable want use. var2_column Required - column name secondary variable pull values . variable want use, use var1_column. var3_column Optional - column name tertiary variable pull values . variable want use, use var1_column var2_column. var4_column Optional - column name fourth appropriate variable pull values . next appropriate variable ones selected var1_column, var2_column, var3_column. var5_column Optional - column name fifth appropriate variable pull values , columns selected var1_column var4_column. var6_column Optional - column name sixth variable. least appropriate variable use, used value found using var1_column var5_column. new_var Required - name new column created combining variable columns. recommended use nutrient's INFOODS Tagname, followed units - e.g. Thiamine milligrams 'THIAmg'. suffix '_combined' automatically attached inputted name. comment Required - default: TRUE - TRUE FALSE. comment set TRUE (default), function run comment describing source new_var column added comment_col. comment_col selected, comment = TRUE, one created. comment_col Optional - default: 'comments' - potential input variable; column contains metadata comments food item question. required comment parameter set FALSE. set true, comment_col entry found df, create column name entry.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/nutri_combiner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-column Nutrient Combiner — nutri_combiner","text":"Original data.frame new _combined column,   (depending options selected) additional comment/comments column   comment.","code":""},{"path":"https://tomcodd.github.io/NutritionTools/reference/nutri_combiner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-column Nutrient Combiner — nutri_combiner","text":"","code":"# An example data.frame has been created to give an example of using the # nutri_combiner to combine FAT values. breakfast_df <- breakfast_df[, c(\"food_code\", \"food_name\", \"FATg\", \"FAT_g\", \"FATCEg\", \"comments\")] breakfast_df #>    food_code      food_name FATg FAT_g FATCEg                       comments #> 1      F0001          Bacon   21  20.9     NA                                #> 2      F0002          Beans   NA  12.0     NA These are imaginary food items #> 3      F0003          Toast   NA    NA     NA                           <NA> #> 4      F0004       Mushroom   NA    NA   16.0 With imaginary nutrient values #> 5      F0005           Eggs   11  10.9     NA                                #> 6      F0006         Tomato   NA  33.0   33.0                     And blanks #> 7      F0007        Sausage   13  12.1     NA                           <NA> #> 8      F0008         Butter   16  16.1   15.9      To test different outputs #> 9      F0009    Brown Sauce   NA    NA     NA                                #> 10     F0010 Tomato Ketchup   NA    NA     NA                  And scenarios  # We start with a data.frame containing multiple patchy values for fat. Ideally # we would like to combine these into a single 'combined' column with as few gaps # as possible. We would like to use FATg as the main value, and then fill in with # FAT_g as a second choice, and then FATCEg as a last resort. We would like the # new column to be called 'FAT_g_combined'. # # In this case, the following nutri_combiner input would be used:  Fat_combined_results <- nutri_combiner_output <- nutri_combiner(   breakfast_df,   \"FATg\",   \"FAT_g\",   \"FATCEg\",   new_var = \"FAT_g\") #> --------------------------- #>  #> Breakdown of values used: #>  #>             FAT_g_combined equal to FATCEg  #>                                          1  #>              FAT_g_combined equal to FAT_g  #>                                          2  #>               FAT_g_combined equal to FATg  #>                                          4  #> No suitable value for FAT_g_combined found  #>                                          3  #>  #> ---------------------------  Fat_combined_results #>    food_code      food_name FATg FAT_g FATCEg #> 1      F0001          Bacon   21  20.9     NA #> 2      F0002          Beans   NA  12.0     NA #> 3      F0003          Toast   NA    NA     NA #> 4      F0004       Mushroom   NA    NA   16.0 #> 5      F0005           Eggs   11  10.9     NA #> 6      F0006         Tomato   NA  33.0   33.0 #> 7      F0007        Sausage   13  12.1     NA #> 8      F0008         Butter   16  16.1   15.9 #> 9      F0009    Brown Sauce   NA    NA     NA #> 10     F0010 Tomato Ketchup   NA    NA     NA #>                                                          comments #> 1                                    FAT_g_combined equal to FATg #> 2   These are imaginary food items; FAT_g_combined equal to FAT_g #> 3                      No suitable value for FAT_g_combined found #> 4  With imaginary nutrient values; FAT_g_combined equal to FATCEg #> 5                                    FAT_g_combined equal to FATg #> 6                       And blanks; FAT_g_combined equal to FAT_g #> 7                                    FAT_g_combined equal to FATg #> 8         To test different outputs; FAT_g_combined equal to FATg #> 9                      No suitable value for FAT_g_combined found #> 10      And scenarios; No suitable value for FAT_g_combined found #>    FAT_g_combined #> 1              21 #> 2              12 #> 3              NA #> 4              16 #> 5              11 #> 6              33 #> 7              13 #> 8              16 #> 9              NA #> 10             NA  # Note how the values are filled in according to the priority order - with # a note added to the comments column showing the origins for each."}]
