% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CHOAVLDFg_calculator.R
\name{CHOAVLDFg_calculator}
\alias{CHOAVLDFg_calculator}
\title{Carbohydrates (calculated by difference) Calculator}
\usage{
CHOAVLDFg_calculator(
  df,
  WATERg_column = "WATERg",
  PROCNTg_column = "PROCNTg",
  FAT_g_combined_column = "FAT_g_combined",
  FIBTGg_combined_column = "FIBTGg_combined",
  ALCg_column = "ALCg",
  ASHg_column = "ASHg",
  comment = TRUE,
  comment_col = "comments",
  NegativeValueReplacement = 0,
  NegativeValueDF = FALSE
)
}
\arguments{
\item{df}{Required - the data.frame the data is currently stored in.}

\item{WATERg_column}{Required - default: \code{'WATERg'} - The name of the
column containing Water/moisture content in grams per 100g of Edible
Portion (EP).}

\item{PROCNTg_column}{Required - default: \code{'PROCNTg'} - Protein in
grams per 100g of Edible Portion (EP), as reported in the original FCT
and assumed to be calculated from nitrogen (NTg) content.}

\item{FAT_g_combined_column}{Required - default:
\code{'FAT_g_combined'} - Fat content, unknown method of calculation,
in grams per 100g of Edible Portion (EP).}

\item{FIBTGg_combined_column}{Required - default:
\code{'FIBTGg_combined'} - Fibre content from combined Tagnames, with
preference of Total dietary fibre by AOAC Prosky method, expressed in
grams per 100g of Edible Portion (EP).}

\item{ALCg_column}{Required - default: \code{'ALCg'} - Alcohol in grams per
100g of Edible Portion (EP).}

\item{ASHg_column}{Required - default: \code{'ASHg'} - Ashes in grams per
100g of Edible Portion (EP).}

\item{comment}{Required - default: \code{TRUE} - \code{TRUE} or \code{FALSE}.
If \code{comment} is set to \code{TRUE} (as it is by default), when the
function is run a comment describing the source of the
\code{CHOAVLDFg_calculated} column is added to the \code{comment_col}
If no \code{comment_col} is selected, and \code{comment = TRUE}, one is
created.}

\item{comment_col}{Optional - default: \code{'comments'} - A potential
input variable; the column which contains the metadata comments for the
food item in question. Not required if \code{comment} is set to
\code{FALSE}. If \code{comment} is set to \code{TRUE}, and the
\code{comment_col} input is not the name of a column found in the
\code{df}, the function will create a column with the name of the
\code{comment_col} input to store comments in.}

\item{NegativeValueReplacement}{Required - default: \code{0} - Options are
\code{0}, \code{NA}, \code{'remove'}, or \code{'nothing'}. Choose what
happens to negative values. If set to \code{0}, then negative values are
set to 0. If set to \code{NA}, they are replaced with NA. if set to
\code{'remove'}, then those entries in the \code{df} are removed. if set to
\code{'nothing'}, then they are left as negative values.}

\item{NegativeValueDF}{Required - default: \code{FALSE} - \code{TRUE} or
\code{FALSE}. If set to \code{TRUE}, Then the output switches from being
a copy of the input \code{df} with the the \code{CHOAVLDFg_calculated}
column to a subset of that dataframe only showing
\code{CHOAVLDFg_calculated} values that are less than 0, for manual
inspection.}
}
\value{
Original data.frame with a new \code{CHOAVLDFg_calculated} column, and
  (depending on the options selected) an additional comment/comments column
  and comment.
}
\description{
Calculates CHOAVLDFg_calculated = (100 - (WATERg + PROTg +
  FATg_combined + FBGTg + ASHg + ALCg)). Column names are case
  sensitive and an error is returned if not found.
}
\examples{
# Two example data.frames have been prepared to illustrate the
# CHOAVLDFg_calculator The first is a dataset of fictional food values to
# illustrate the various options in the function, and the second is a dataset
# with non-standard column names, to show how to specify columns.

# This is the first data.frame - before the CHOAVLDFg_calculator has been used on it.
breakfast_df <- breakfast_df[,c("food_code", "food_name", "WATERg",
"PROCNTg", "FAT_g_combined", "FIBTGg_combined", "ALCg", "ASHg",
"comments")]
breakfast_df
#
#
# First, an example of the standard usecase - calculate the CHOAVLDFg_calculated
# value, while resetting negative values to 0.
NegativeToZeroResults <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = 0)
#
NegativeToZeroResults
# See the changes - the addition of the CHOAVLDFg_calculated column, and
# the additions to the comments column. Notice how some comments are
# specially formulated to show if the corresponding CHOAVLDFg_calculated
# value has been reset to 0.
#
#
# The second example shows the results when the Replacement option is set to NA
NegativeToNA_results <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = NA)
#
NegativeToNA_results
# Check the CHOAVLDFg_calculated column and comments column again - see how
# values below zero have been replaced with NA, and a note of this change
# logged in the comments column.
#
#
# The third example shows the results when the Replacement option is set to 'remove'
remove_results <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = "remove")
#
remove_results
# See how the out of bounds values have been removed.
#
#
# The fourth example is of the nothing results - i.e. nothing happens to the
# negative values.
NegativeNoChangeResults <- CHOAVLDFg_calculator(breakfast_df, NegativeValueReplacement = "nothing")
#
NegativeNoChangeResults
# Look at the CHOAVLDFg_calculator values - and see how they've been left,
# even if they're negative.
#
#
# The fifth example is of the negative dataframe - an option useful for identifying
# and examining negative results.
NegativeCarb_results <- CHOAVLDFg_calculator(breakfast_df, NegativeValueDF = TRUE)
#
NegativeCarb_results
# Only the out of bounds results are present, in their original form, for inspection.
#
#
# The sixth example is of the CHOAVLDFg_calculator working on a dataframe with
# non-standard column names. It uses a modified example data frame, shown below.
#
breakfast_df_nonstandard <- breakfast_df_nonstandard[,c("food_code",
"food_name", "Water_values_g", "PROCNT_values_g", "FIBTG_values_g_combined",
"ALC_values_g", "ASH_values_g", "comments_column")]
breakfast_df_nonstandard
# Notice how the column names are different, and differ from the assumed names.
#
#
# Because of the different names, the column names for each input must be specified.
nothing_results_NonStandardInput <- CHOAVLDFg_calculator(
breakfast_df_nonstandard,
WATERg_column = "Water_values_g",
PROCNTg_column = "PROCNT_values_g",
FAT_g_combined_column = "FAT_values_g_combined",
FIBTGg_combined_column = "FIBTG_values_g_combined",
ALCg_column = "ALC_values_g",
ASHg_column = "ASH_values_g",
comment_col = "comments_column"
)
#
# The resulting CHOAVLDFg_calculated column is the same as in the first example,
# despite the different names.
}
