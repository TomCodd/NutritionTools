% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SOPg_calculator.R
\name{SOPg_calculator}
\alias{SOPg_calculator}
\title{Sum of Proximate Calculator}
\usage{
SOPg_calculator(
  df,
  WATERg_column = "WATERg",
  PROCNTg_column = "PROCNTg",
  FAT_g_standardised_column = "FAT_g_standardised",
  CHOAVLDFg_standardised_column = "CHOAVLDFg_standardised",
  FIBTGg_standardised_column = "FIBTGg_standardised",
  ALCg_column = "ALCg",
  ASHg_column = "ASHg",
  comment = TRUE,
  comment_col = "comments",
  OutsideBoundsReplacement = "none",
  LowerBound = 93,
  UpperBound = 107,
  OutsideBoundsDF = FALSE
)
}
\arguments{
\item{df}{Required - the data.frame the data is currently stored in.}

\item{WATERg_column}{Required - default: \code{'WATERg'} - The name of the
column containing Water/moisture content in grams per 100g of Edible
Portion (EP).}

\item{PROCNTg_column}{Required - default: \code{'PROCNTg'} - Protein in
grams per 100g of Edible Portion (EP), as reported in the original FCT
and assumed to be calculated from nitrogen (NTg) content.}

\item{FAT_g_standardised_column}{Required - default:
\code{'FAT_g_standardised'} - Fat content, unknown method of calculation,
in grams per 100g of Edible Portion (EP).}

\item{CHOAVLDFg_standardised_column}{Required - default:
\code{'CHOAVLDFg_standardised'} - Available carbohydrates calculated by
difference, in grams per 100g of Edible Portion (EP).}

\item{FIBTGg_standardised_column}{Required - default:
\code{'FIBTGg_standardised'} - Fibre content from combined Tagnames, with
preference of Total dietary fibre by AOAC Prosky method, expressed in
grams per 100g of Edible Portion (EP).}

\item{ALCg_column}{Required - default: \code{'ALCg'} - Alcohol in grams per
100g of Edible Portion (EP).}

\item{ASHg_column}{Required - default: \code{'ASHg'} - Ashes in grams per
100g of Edible Portion (EP).}

\item{comment}{Optional - default: \code{TRUE} - \code{TRUE} or
\code{FALSE}. If comment is set to \code{TRUE} (as it is by default), when
the function is run a comment describing the source of the
\code{SOPg_calculated} column is added to the comment_col. If no
comment_col is selected, and \code{comment = TRUE}, one is created, called
\code{comments}.}

\item{comment_col}{Optional - default: \code{'comments'} - A potential
input variable; the column which contains the metadata comments for the
food item in question. Not required if the comment parameter is set to
\code{FALSE}.}

\item{OutsideBoundsReplacement}{Optional - default: \code{'none'} -
Options are \code{'round'}, \code{NA}, \code{'remove'}, or
\code{'none'}. Choose what happens to values that are outside of the
bounds. The ranges are set to FAO standards: 93-107 is considered
acceptable. This parameter decides what happens to those values less than
93, or over 107. If set to \code{round}, then outside of bound values are
set to the closest acceptable value (e.g. 90 -> 93, 111 -> 107. If set to
\code{NA}, they are replaced with NA. if set to \code{'remove'}, then
those rows are removed (including NA results). if set to \code{'none'},
then they are left as the out of bound values.}

\item{LowerBound}{Optional - default: \code{93} - Integer value. Sets the
lower boundary for acceptable SOPg_calculated values, and therefore
determines the values affected by \code{OutsideBoundsReplacement} and
\code{OutsideBoundsDF}. FAO standards list 93 as the lower boundary for
acceptable values, and 95 as the lower boundary for preferred values.}

\item{UpperBound}{Optional - default: \code{107} - Integer value. Sets the
upper boundary for acceptable SOPg_calculated values, and therefore
determines the values affected by \code{OutsideBoundsReplacement} and
\code{OutsideBoundsDF}. FAO standards list 107 as the upper boundary for
acceptable values, and 105 as the upper boundary for preferred values.}

\item{OutsideBoundsDF}{Optional - default: \code{FALSE} - \code{TRUE} or
\code{FALSE}. If set to \code{TRUE}, Then the output switches from being
a copy of the input df with the the SOPg_calculated column to a subset
of that dataframe only showing SOPg_calculated values that are out of
bounds, for manual inspection.}
}
\value{
Original FCT dataset with a new SOPg_calculated column.
}
\description{
Calculates SOPg_calculated = (WATERg + PROCNTg +
  FAT_g_standardised + CHOAVLDFg_standardised + FIBTGg_standardised_column
  + ALCg +ASHg). Column names are case sensitive and an error is returned
  if not found.
}
\examples{
# Two example data.frames have been prepared to illustrate the
# SOPg_calculator. The first is a dataset of fictional food values to
# illustrate the various options in the function, and the second is a dataset
# with non-standard column names, to show how to specify columns.

# This is the first data.frame - before the SOPg_calculator has been used on it.
SOP_example_df
#
#
# First, an example of the standard usecase - calculate the SOPg_calculated
# value, without modifying out of bounds values.
nothing_results <- SOPg_calculator(SOP_example_df, OutsideBoundsReplacement = "none")
# See the changes - the addition of the SOPg_calculated column, and the
# additions to the comments column.
#
#
# The second example shows the results when the Replacement option is set to NA
NA_results <- SOPg_calculator(SOP_example_df, OutsideBoundsReplacement = NA)
# Check the SOP column and comments column again - see how values outside of
# bounds have been replaced with NA, and a note of this change logged in the
# comments column.
#
#
# The third example shows the results when the Replacement option is set to 'remove'
remove_results <- SOPg_calculator(SOP_example_df, OutsideBoundsReplacement = "remove")
# See how the out of bounds values have been removed.
#
#
# The fourth example is of the rounding results.
rounding_results <- SOPg_calculator(SOP_example_df, OutsideBoundsReplacement = "round")
# Look at the SOP_standardised values - and see how they've been capped to the bounds
# if they would have been out fo bounds, with a note of the change in the comments.
#
#
# The fifth example is of the out of bounds dataframe - an option useful for identifying
# and examining out of bounds results.
OoB_DF_results <- SOPg_calculator(SOP_example_df, OutsideBoundsDF = TRUE)
# Only the out of bounds results are present, in their original form, for inspection.
#
#
# The sixth example is of the SOPg_calculator working on a dataframe with non-standard
# column names. It uses a modified example data frame, shown below.
SOP_example_df_nonstandard
# Notice how the column names are different, and differ from the assumed names.
#
#
# Because of the different names, the column names for each input must be specified.
nothing_results_NonStandardInput <- SOPg_calculator(
SOP_example_df_nonstandard,
WATERg_column = "Water_values_g",
PROCNTg_column = "PROCNT_values_g",
FAT_g_standardised_column = "FAT_values_g_standardised",
CHOAVLDFg_standardised_column = "CHOAVLDF_values_g_standardised",
FIBTGg_standardised_column = "FIBTG_values_g_standardised",
ALCg_column = "ALC_values_g",
ASHg_column = "ASH_values_g",
comment_col = "comments_column",
LowerBound = 97,
UpperBound = 103,
OutsideBoundsReplacement = "nothing")
# The resulting SOPg_calculated column is the same as in the first example, despite the
# different names - although, due to the shift in the bounds, the warning message is not.
}
