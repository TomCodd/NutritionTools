% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Data_Imputer.R
\name{Data_Imputer}
\alias{Data_Imputer}
\title{Data Imputer}
\usage{
Data_Imputer(
  df,
  receiver_title_column,
  receiver_search_terms = c(),
  receiver_desc_column,
  receiver_exclude_terms = c(),
  receiver_id_column,
  missing_nutrient_column,
  water_column = "WATERg",
  comment_col = "comments",
  donor_fct_column = "Source",
  donor_df = df,
  donor_id_column = receiver_id_column,
  donor_search_column = receiver_desc_column,
  donor_search_terms = c(),
  extra_info_columns = c(),
  exclude_receiver_terms = TRUE,
  donor_search_collapse = c(","),
  Assume_continue = FALSE,
  term_search = "AND",
  water_balance = TRUE,
  code_output = TRUE,
  txt_output = TRUE,
  round_imputed_figure = TRUE
)
}
\arguments{
\item{df}{Required - the data.frame which contains the food items with
missing values.}

\item{receiver_title_column}{Required - The name of the column in \code{df}
which contains food groups or titles.}

\item{receiver_search_terms}{Required - Search words to identify a specific
food group or title from \code{receiver_title_column}. All items missing
values from the \code{missing_nutrient_column} within this food group will
be shortlisted for imputation.}

\item{receiver_desc_column}{Required - The name of the column within
\code{df} that contains detailed food names.}

\item{receiver_exclude_terms}{Optional - = c() Optional -}

\item{receiver_id_column}{Required - The name of the column within \code{df}
that contains the ID numbers of the food items.}

\item{missing_nutrient_column}{Required - The name of the column within
\code{df} AND \code{donor_df} that contains the nutrient you are trying to
impute values for.}

\item{water_column}{Required - default: \code{'WATERg'} - The name of the
column within \code{df} AND \code{donor_df} that contains water values, in
grams per 100g.}

\item{comment_col}{Required - default: \code{'comments'} - The name of the
column within \code{df} that contains comments.}

\item{donor_fct_column}{Required - default: \code{'Source'} - The name of the
column within \code{df} that contains the source Food Composition Table the
food items are from.}

\item{donor_df}{Required - default: \code{df} - The name of the data.frame
that you are looking to get fill-in values from. The default is the same df
as the donor df, as this function was developed to run over large multi-FCT
composite tables.}

\item{donor_id_column}{Required - default: \code{receiver_id_column} - The
name of the column within \code{donor_df} that contains the ID numbers of
the food items. The default is suitable when using \code{df} as the donor
and receiver.}

\item{donor_search_column}{Required - default: \code{receiver_desc_column} -
The name of the column within \code{donor_df} that contains detailed food
names. The default is suitable when using \code{df} as the donor and
receiver.}

\item{donor_search_terms}{Required - The search terms you would like to use
to find suitable imputation values to use. Added to the food descriptions
of the receiver items.}

\item{extra_info_columns}{Optional - The name of columns present in both
data.frames (\code{df} AND \code{donor_df}) you would like to see the
contents of when making decisions about which items should be used for
imputation.}

\item{exclude_receiver_terms}{Required - default: \code{TRUE} - Either
\code{TRUE} or \code{FALSE}. The donor search terms by default are
generated from the food descriptions found in \code{receiver_desc_column}.
If \code{TRUE} then key words present in \code{receiver_search_terms} will
be excluded from these items. For example, if a food item is in a Food
group 'Goat, Offal', and the food description is 'Goat, liver, raw'; if
this option is set to \code{TRUE} then the search terms used will be
'liver, raw'; if set to \code{FALSE} then the full 'Goat, lever, raw' will
be used.}

\item{donor_search_collapse}{Optional - default: \code{c(",")} - The string
used to separate the search terms. if the search terms are 'Goat, liver,
raw', then using the default ',' will mean that the function will return
items that match 'goat' and 'liver' and 'raw'. If none are used, only items
that match the entire string; 'Goat, liver, raw'; will be returned.}

\item{Assume_continue}{Required - default: \code{FALSE} - Either \code{TRUE}
or \code{FALSE}. There are several checks throughout the process to
double-check inputs. If set to \code{TRUE}, this setting skips them,
assuming the inputs are correct.}

\item{term_search}{Required - default: \code{"AND"} - Either \code{"AND"} or
\code{"OR"}. Decide whether the imputation value search should results
should find items which match all the search terms at once (\code{"AND"})
or only one of them \code{"OR"}.}

\item{water_balance}{Required - default: \code{TRUE} - Either \code{TRUE} or
\code{FALSE}. If \code{TRUE} then the function will water-balance the
values.}

\item{code_output}{Required - default: \code{TRUE} - Either \code{TRUE} or
\code{FALSE}. Decides whether the output should be pre-written code to be
inserted just above where this function was called (by default), or a
data.frame with the changes made (if set to \code{FALSE}).}

\item{txt_output}{Required - default: \code{TRUE} - Either \code{TRUE} or
\code{FALSE}. If using \code{code_output}, then this option attaches the
generated code to a .txt file and saves it in your working directory.}

\item{round_imputed_figure}{Required - default: \code{TRUE} - Either
\code{TRUE} or \code{FALSE}. Decide whether the imputed values should be
rounded to 2 decimal places.}
}
\value{
Either code that applies the imputations (if \code{code_output} is
  set to \code{TRUE}, as it is by default), or an altered data.frame with the
  imputations applied.
}
\description{
The Data Imputer is an interactive function used to find
  suitable imputations for food items, either from the same dataset (by
  default) or from a different dataset. The output by default is a console
  output and a .txt file containing the lines of code needed to implement the
  imputations that the user has picked, however this can be changed to a
  data.frame with the changes implemented.
}
\examples{
# Unfortunately due to the functions interactive nature these examples cannot
# be run from within the package help - please copy them, uncomment them, and
# run them manually.
#
#' #
# First we'll run through a demonstration of the Data_Imputer imputing from
# within the same dataset. Because this is the default setting, fewer inputs
# are needed.
#
# The dataset can be viewed using View(KE18_subset_modified)
#
# The dataset in question is missing some VITB12mcg values for 'Lamb liver,
# raw' and 'Lamb, liver, boiled (without salt)'. However, within the same
# dataset are some goat values which could be a good imputation value.
#
# Data_Imputer(
#    df = KE18_subset_modified,
#    receiver_title_column = "food_group",
#    receiver_search_terms = c("MEAT", "POULTRY"), #Identifies the food group
#    #using unique terms
#    receiver_desc_column = "food_desc",
#    receiver_exclude_terms = c("lean", "blood"), #We don't need to see any
#    #of the 'lean' or 'blood' results
#    receiver_id_column = "fdc_id",
#    term_search = "OR",
#    missing_nutrient_column = "VITB12mcg",
#    donor_search_terms = c("goat"),
#    water_column = "WATERg",
#    comment_col = "comments",
#    donor_fct_column = "source_fct"
#  )


# In this example we'll impute values from a different data.frame - the West
# Africa FCT subset, WA19_subset. This can be viewed using View(WA19_subset).
# We also want to look at some extra columns when we want to choose an item,
# so we've added two columns to the extra_info_columns option.

#  Data_Imputer(
#    df = KE18_subset_modified,
#    receiver_title_column = "food_group",
#    receiver_search_terms = c("MEAT", "POULTRY"), #Identifies the food group
#    # using unique terms
#    receiver_desc_column = "food_desc",
#    receiver_exclude_terms = c("lean", "blood"), #We don't need to see any
#    #of the 'lean' or 'blood' results
#    receiver_id_column = "fdc_id",
#    missing_nutrient_column = "VITB12mcg",
#    donor_search_terms = c("goat"),
#    water_column = "WATERg",
#    comment_col = "comments",
#    donor_fct_column = "source_fct",
#    donor_df = WA19_subset,
#    donor_id_column = "fdc_id",
#    term_search = "OR",
#    donor_search_column = "food_desc",
#    extra_info_columns = c("PROCNTg", "CHOAVLDFg")
#  )
}
