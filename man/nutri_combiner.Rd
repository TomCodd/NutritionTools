% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nutri_combiner.R
\name{nutri_combiner}
\alias{nutri_combiner}
\title{Multi-column Nutrient Combiner}
\usage{
nutri_combiner(
  df,
  var1_column,
  var2_column,
  var3_column,
  var4_column,
  var5_column,
  var6_column,
  new_var,
  fill_missing = FALSE,
  comment = TRUE,
  comment_col = "comments"
)
}
\arguments{
\item{df}{Required - the data.frame the data is currently stored in.}

\item{var1_column}{Required - The column name of the primary variable to
pull values from. This should be the variable you most want to use.}

\item{var2_column}{Required - The column name of the secondary variable to
pull values from. This should be the variable you most want to use, if
you can't use \code{var1_column}.}

\item{var3_column}{Optional - The column name of the tertiary variable to
pull values from. This should be the variable you most want to use, if
you can't use \code{var1_column} or \code{var2_column}.}

\item{var4_column}{Optional - The column name of the fourth most
appropriate variable to pull values from. This should be the next most
appropriate variable after the ones selected for \code{var1_column},
\code{var2_column}, and \code{var3_column}.}

\item{var5_column}{Optional - The column name of the fifth most appropriate
variable to pull values from, after the columns selected for
\code{var1_column} to \code{var4_column}.}

\item{var6_column}{Optional - The column name of the sixth variable. This
should be the least appropriate variable to use, as it will only be used
if a value cannot be found using \code{var1_column} to
\code{var5_column}.}

\item{new_var}{Required - The name of the new column that will be created
by combining the variable columns. It is recommended to use the
nutrient's INFOODS Tagname, followed by the units - e.g. Thiamine in
milligrams would be 'THIAmg'. The suffix '_combined' is automatically
attached to the inputted name.}

\item{fill_missing}{Optional - default: \code{FALSE} - \code{TRUE} or
\code{FALSE}. If set to \code{TRUE}, this will cause the nutri_combiner to
check for missing columns (or inputs that don't match columns in the df).
If it finds them, instead of throwing an error as it normally would, the
function removes the ones which aren't valid, and then fills in the
variables in the correct order out of the remaining valid column names.}

\item{comment}{Required - default: \code{TRUE} - \code{TRUE} or \code{FALSE}.
If comment is set to \code{TRUE} (as it is by default), when the function
is run a comment describing the source of \code{new_var} column is added
to the comment_col. If no comment_col is selected, and \code{comment =
TRUE}, one is created.}

\item{comment_col}{Optional - default: \code{'comments'} - A potential
input variable; the column which contains the metadata comments for the
food item in question. Not required if the comment parameter is set to
\code{FALSE}. If set to true, and the comment_col entry is not found in
the df, it will create a column with the name of the entry.}
}
\value{
Original data.frame with a new \code{_combined} column, and
  (depending on the options selected) an additional comment/comments column
  and comment.
}
\description{
Combines nutrients or variables that are spread out over
  multiple columns into a single new column \code{new_var}, depending on a
  user-set hierarchy. The hierarchy is set so that \code{var1_column} is
  the main variable, and the priority. If no values for \code{var1_column}
  are available (i.e. the \code{var1_column} has blanks, or NA values),
  then values from \code{var2_column} are used instead. If there are still
  blanks, then values from \code{var3_column} are used, then
  \code{var4_column}, then \code{var5_column} and finally
  \code{var6_column}. Please note - the use of \code{var3_column} -
  \code{var6_column} are optional, however \code{var1_column} and
  \code{var2_column} must be present. Comments can also be used to record
  the origin of these values.
}
\examples{
# An example data.frame has been created to give an example of using the
# nutri_combiner to combine FAT values.
breakfast_df <- breakfast_df[, c("food_code", "food_name", "FATg", "FAT_g",
"FATCEg", "comments")]
breakfast_df

# We start with a data.frame containing multiple patchy values for fat. Ideally
# we would like to combine these into a single 'combined' column with as few gaps
# as possible. We would like to use FATg as the main value, and then fill in with
# FAT_g as a second choice, and then FATCEg as a last resort. We would like the
# new column to be called 'FAT_g_combined'.
#
# In this case, the following nutri_combiner input would be used:

Fat_combined_results <- nutri_combiner(
  breakfast_df,
  "FATg",
  "FAT_g",
  "FATCEg",
  new_var = "FAT_g")

Fat_combined_results

# Note how the values are filled in according to the priority order - with
# a note added to the comments column showing the origins for each.

# As an example of the fill_missing function, see what happens when the
# function is run with an incorrect column entered:

Fat_combined_results_2 <- nutri_combiner(
  breakfast_df,
  "FATg",
  "FAT_g",
  "NonExistant_Fat_Value",
  "FATCEg",
  new_var = "FAT_g",
  fill_missing = TRUE)

Fat_combined_results_2

# See how the columns reorder, with notice.

}
